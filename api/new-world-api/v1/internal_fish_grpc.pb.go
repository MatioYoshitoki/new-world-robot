// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: api/new-world-api/v1/internal_fish.proto

package apipb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InternalFishClient is the client API for InternalFish service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InternalFishClient interface {
	UpdateUserFishStatus(ctx context.Context, in *UserFishStatusUpdateRequest, opts ...grpc.CallOption) (*UserFishStatusUpdateResult, error)
}

type internalFishClient struct {
	cc grpc.ClientConnInterface
}

func NewInternalFishClient(cc grpc.ClientConnInterface) InternalFishClient {
	return &internalFishClient{cc}
}

func (c *internalFishClient) UpdateUserFishStatus(ctx context.Context, in *UserFishStatusUpdateRequest, opts ...grpc.CallOption) (*UserFishStatusUpdateResult, error) {
	out := new(UserFishStatusUpdateResult)
	err := c.cc.Invoke(ctx, "/new_world.v1.InternalFish/UpdateUserFishStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InternalFishServer is the server API for InternalFish service.
// All implementations must embed UnimplementedInternalFishServer
// for forward compatibility
type InternalFishServer interface {
	UpdateUserFishStatus(context.Context, *UserFishStatusUpdateRequest) (*UserFishStatusUpdateResult, error)
	mustEmbedUnimplementedInternalFishServer()
}

// UnimplementedInternalFishServer must be embedded to have forward compatible implementations.
type UnimplementedInternalFishServer struct {
}

func (UnimplementedInternalFishServer) UpdateUserFishStatus(context.Context, *UserFishStatusUpdateRequest) (*UserFishStatusUpdateResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserFishStatus not implemented")
}
func (UnimplementedInternalFishServer) mustEmbedUnimplementedInternalFishServer() {}

// UnsafeInternalFishServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InternalFishServer will
// result in compilation errors.
type UnsafeInternalFishServer interface {
	mustEmbedUnimplementedInternalFishServer()
}

func RegisterInternalFishServer(s grpc.ServiceRegistrar, srv InternalFishServer) {
	s.RegisterService(&InternalFish_ServiceDesc, srv)
}

func _InternalFish_UpdateUserFishStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFishStatusUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalFishServer).UpdateUserFishStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/new_world.v1.InternalFish/UpdateUserFishStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalFishServer).UpdateUserFishStatus(ctx, req.(*UserFishStatusUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InternalFish_ServiceDesc is the grpc.ServiceDesc for InternalFish service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InternalFish_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "new_world.v1.InternalFish",
	HandlerType: (*InternalFishServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateUserFishStatus",
			Handler:    _InternalFish_UpdateUserFishStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/new-world-api/v1/internal_fish.proto",
}
