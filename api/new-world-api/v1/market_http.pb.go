// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.0
// - protoc             v3.21.6
// source: api/new-world-api/v1/market.proto

package apipb

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationMarketBuy = "/new_world.v1.Market/Buy"
const OperationMarketDetail = "/new_world.v1.Market/Detail"
const OperationMarketList = "/new_world.v1.Market/List"
const OperationMarketSell = "/new_world.v1.Market/Sell"
const OperationMarketStopSell = "/new_world.v1.Market/StopSell"

type MarketHTTPServer interface {
	Buy(context.Context, *MarketBuyRequest) (*MarketBuyResult, error)
	Detail(context.Context, *MarketDetailRequest) (*MarketDetailResult, error)
	List(context.Context, *MarketListRequest) (*MarketListResult, error)
	Sell(context.Context, *MarketSellRequest) (*MarketSellResult, error)
	StopSell(context.Context, *MarketStopSellRequest) (*MarketStopSellResult, error)
}

func RegisterMarketHTTPServer(s *http.Server, srv MarketHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/market/list", _Market_List0_HTTP_Handler(srv))
	r.POST("/api/v1/market/detail", _Market_Detail0_HTTP_Handler(srv))
	r.POST("/api/v1/market/sell/start", _Market_Sell0_HTTP_Handler(srv))
	r.POST("/api/v1/market/sell/stop", _Market_StopSell0_HTTP_Handler(srv))
	r.POST("/api/v1/market/buy", _Market_Buy0_HTTP_Handler(srv))
}

func _Market_List0_HTTP_Handler(srv MarketHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MarketListRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMarketList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.List(ctx, req.(*MarketListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MarketListResult)
		return ctx.Result(200, reply)
	}
}

func _Market_Detail0_HTTP_Handler(srv MarketHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MarketDetailRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMarketDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Detail(ctx, req.(*MarketDetailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MarketDetailResult)
		return ctx.Result(200, reply)
	}
}

func _Market_Sell0_HTTP_Handler(srv MarketHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MarketSellRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMarketSell)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Sell(ctx, req.(*MarketSellRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MarketSellResult)
		return ctx.Result(200, reply)
	}
}

func _Market_StopSell0_HTTP_Handler(srv MarketHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MarketStopSellRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMarketStopSell)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.StopSell(ctx, req.(*MarketStopSellRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MarketStopSellResult)
		return ctx.Result(200, reply)
	}
}

func _Market_Buy0_HTTP_Handler(srv MarketHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MarketBuyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMarketBuy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Buy(ctx, req.(*MarketBuyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MarketBuyResult)
		return ctx.Result(200, reply)
	}
}

type MarketHTTPClient interface {
	Buy(ctx context.Context, req *MarketBuyRequest, opts ...http.CallOption) (rsp *MarketBuyResult, err error)
	Detail(ctx context.Context, req *MarketDetailRequest, opts ...http.CallOption) (rsp *MarketDetailResult, err error)
	List(ctx context.Context, req *MarketListRequest, opts ...http.CallOption) (rsp *MarketListResult, err error)
	Sell(ctx context.Context, req *MarketSellRequest, opts ...http.CallOption) (rsp *MarketSellResult, err error)
	StopSell(ctx context.Context, req *MarketStopSellRequest, opts ...http.CallOption) (rsp *MarketStopSellResult, err error)
}

type MarketHTTPClientImpl struct {
	cc *http.Client
}

func NewMarketHTTPClient(client *http.Client) MarketHTTPClient {
	return &MarketHTTPClientImpl{client}
}

func (c *MarketHTTPClientImpl) Buy(ctx context.Context, in *MarketBuyRequest, opts ...http.CallOption) (*MarketBuyResult, error) {
	var out MarketBuyResult
	pattern := "/api/v1/market/buy"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMarketBuy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MarketHTTPClientImpl) Detail(ctx context.Context, in *MarketDetailRequest, opts ...http.CallOption) (*MarketDetailResult, error) {
	var out MarketDetailResult
	pattern := "/api/v1/market/detail"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMarketDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MarketHTTPClientImpl) List(ctx context.Context, in *MarketListRequest, opts ...http.CallOption) (*MarketListResult, error) {
	var out MarketListResult
	pattern := "/api/v1/market/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMarketList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MarketHTTPClientImpl) Sell(ctx context.Context, in *MarketSellRequest, opts ...http.CallOption) (*MarketSellResult, error) {
	var out MarketSellResult
	pattern := "/api/v1/market/sell/start"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMarketSell))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MarketHTTPClientImpl) StopSell(ctx context.Context, in *MarketStopSellRequest, opts ...http.CallOption) (*MarketStopSellResult, error) {
	var out MarketStopSellResult
	pattern := "/api/v1/market/sell/stop"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMarketStopSell))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
