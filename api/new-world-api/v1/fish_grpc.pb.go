// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: api/new-world-api/v1/fish.proto

package apipb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FishClient is the client API for Fish service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FishClient interface {
	List(ctx context.Context, in *FishListRequest, opts ...grpc.CallOption) (*FishListResult, error)
	DivestitureGodhead(ctx context.Context, in *DivestitureGodheadRequest, opts ...grpc.CallOption) (*DivestitureGodheadResult, error)
	Refining(ctx context.Context, in *FishRefiningRequest, opts ...grpc.CallOption) (*FishRefiningResult, error)
	Create(ctx context.Context, in *FishCreateRequest, opts ...grpc.CallOption) (*FishCreateResult, error)
	PoolRank(ctx context.Context, in *FishPoolRankRequest, opts ...grpc.CallOption) (*FishPoolRankResult, error)
	Sleep(ctx context.Context, in *FishSleepRequest, opts ...grpc.CallOption) (*FishSleepResult, error)
	Alive(ctx context.Context, in *FishAliveRequest, opts ...grpc.CallOption) (*FishAliveResult, error)
	Pull(ctx context.Context, in *FishPullRequest, opts ...grpc.CallOption) (*FishPullResult, error)
	ParkingList(ctx context.Context, in *ParkingListRequest, opts ...grpc.CallOption) (*ParkingListResult, error)
	DeadRecords(ctx context.Context, in *FishDeadRecordsRequest, opts ...grpc.CallOption) (*FishDeadRecordsResult, error)
	FishDetail(ctx context.Context, in *FishDetailRequest, opts ...grpc.CallOption) (*FishDetailResult, error)
}

type fishClient struct {
	cc grpc.ClientConnInterface
}

func NewFishClient(cc grpc.ClientConnInterface) FishClient {
	return &fishClient{cc}
}

func (c *fishClient) List(ctx context.Context, in *FishListRequest, opts ...grpc.CallOption) (*FishListResult, error) {
	out := new(FishListResult)
	err := c.cc.Invoke(ctx, "/new_world.v1.Fish/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fishClient) DivestitureGodhead(ctx context.Context, in *DivestitureGodheadRequest, opts ...grpc.CallOption) (*DivestitureGodheadResult, error) {
	out := new(DivestitureGodheadResult)
	err := c.cc.Invoke(ctx, "/new_world.v1.Fish/DivestitureGodhead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fishClient) Refining(ctx context.Context, in *FishRefiningRequest, opts ...grpc.CallOption) (*FishRefiningResult, error) {
	out := new(FishRefiningResult)
	err := c.cc.Invoke(ctx, "/new_world.v1.Fish/Refining", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fishClient) Create(ctx context.Context, in *FishCreateRequest, opts ...grpc.CallOption) (*FishCreateResult, error) {
	out := new(FishCreateResult)
	err := c.cc.Invoke(ctx, "/new_world.v1.Fish/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fishClient) PoolRank(ctx context.Context, in *FishPoolRankRequest, opts ...grpc.CallOption) (*FishPoolRankResult, error) {
	out := new(FishPoolRankResult)
	err := c.cc.Invoke(ctx, "/new_world.v1.Fish/PoolRank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fishClient) Sleep(ctx context.Context, in *FishSleepRequest, opts ...grpc.CallOption) (*FishSleepResult, error) {
	out := new(FishSleepResult)
	err := c.cc.Invoke(ctx, "/new_world.v1.Fish/Sleep", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fishClient) Alive(ctx context.Context, in *FishAliveRequest, opts ...grpc.CallOption) (*FishAliveResult, error) {
	out := new(FishAliveResult)
	err := c.cc.Invoke(ctx, "/new_world.v1.Fish/Alive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fishClient) Pull(ctx context.Context, in *FishPullRequest, opts ...grpc.CallOption) (*FishPullResult, error) {
	out := new(FishPullResult)
	err := c.cc.Invoke(ctx, "/new_world.v1.Fish/Pull", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fishClient) ParkingList(ctx context.Context, in *ParkingListRequest, opts ...grpc.CallOption) (*ParkingListResult, error) {
	out := new(ParkingListResult)
	err := c.cc.Invoke(ctx, "/new_world.v1.Fish/ParkingList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fishClient) DeadRecords(ctx context.Context, in *FishDeadRecordsRequest, opts ...grpc.CallOption) (*FishDeadRecordsResult, error) {
	out := new(FishDeadRecordsResult)
	err := c.cc.Invoke(ctx, "/new_world.v1.Fish/DeadRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fishClient) FishDetail(ctx context.Context, in *FishDetailRequest, opts ...grpc.CallOption) (*FishDetailResult, error) {
	out := new(FishDetailResult)
	err := c.cc.Invoke(ctx, "/new_world.v1.Fish/FishDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FishServer is the server API for Fish service.
// All implementations must embed UnimplementedFishServer
// for forward compatibility
type FishServer interface {
	List(context.Context, *FishListRequest) (*FishListResult, error)
	DivestitureGodhead(context.Context, *DivestitureGodheadRequest) (*DivestitureGodheadResult, error)
	Refining(context.Context, *FishRefiningRequest) (*FishRefiningResult, error)
	Create(context.Context, *FishCreateRequest) (*FishCreateResult, error)
	PoolRank(context.Context, *FishPoolRankRequest) (*FishPoolRankResult, error)
	Sleep(context.Context, *FishSleepRequest) (*FishSleepResult, error)
	Alive(context.Context, *FishAliveRequest) (*FishAliveResult, error)
	Pull(context.Context, *FishPullRequest) (*FishPullResult, error)
	ParkingList(context.Context, *ParkingListRequest) (*ParkingListResult, error)
	DeadRecords(context.Context, *FishDeadRecordsRequest) (*FishDeadRecordsResult, error)
	FishDetail(context.Context, *FishDetailRequest) (*FishDetailResult, error)
	mustEmbedUnimplementedFishServer()
}

// UnimplementedFishServer must be embedded to have forward compatible implementations.
type UnimplementedFishServer struct {
}

func (UnimplementedFishServer) List(context.Context, *FishListRequest) (*FishListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedFishServer) DivestitureGodhead(context.Context, *DivestitureGodheadRequest) (*DivestitureGodheadResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DivestitureGodhead not implemented")
}
func (UnimplementedFishServer) Refining(context.Context, *FishRefiningRequest) (*FishRefiningResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refining not implemented")
}
func (UnimplementedFishServer) Create(context.Context, *FishCreateRequest) (*FishCreateResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedFishServer) PoolRank(context.Context, *FishPoolRankRequest) (*FishPoolRankResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolRank not implemented")
}
func (UnimplementedFishServer) Sleep(context.Context, *FishSleepRequest) (*FishSleepResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sleep not implemented")
}
func (UnimplementedFishServer) Alive(context.Context, *FishAliveRequest) (*FishAliveResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Alive not implemented")
}
func (UnimplementedFishServer) Pull(context.Context, *FishPullRequest) (*FishPullResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pull not implemented")
}
func (UnimplementedFishServer) ParkingList(context.Context, *ParkingListRequest) (*ParkingListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParkingList not implemented")
}
func (UnimplementedFishServer) DeadRecords(context.Context, *FishDeadRecordsRequest) (*FishDeadRecordsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeadRecords not implemented")
}
func (UnimplementedFishServer) FishDetail(context.Context, *FishDetailRequest) (*FishDetailResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FishDetail not implemented")
}
func (UnimplementedFishServer) mustEmbedUnimplementedFishServer() {}

// UnsafeFishServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FishServer will
// result in compilation errors.
type UnsafeFishServer interface {
	mustEmbedUnimplementedFishServer()
}

func RegisterFishServer(s grpc.ServiceRegistrar, srv FishServer) {
	s.RegisterService(&Fish_ServiceDesc, srv)
}

func _Fish_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FishListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/new_world.v1.Fish/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishServer).List(ctx, req.(*FishListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fish_DivestitureGodhead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DivestitureGodheadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishServer).DivestitureGodhead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/new_world.v1.Fish/DivestitureGodhead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishServer).DivestitureGodhead(ctx, req.(*DivestitureGodheadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fish_Refining_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FishRefiningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishServer).Refining(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/new_world.v1.Fish/Refining",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishServer).Refining(ctx, req.(*FishRefiningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fish_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FishCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/new_world.v1.Fish/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishServer).Create(ctx, req.(*FishCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fish_PoolRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FishPoolRankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishServer).PoolRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/new_world.v1.Fish/PoolRank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishServer).PoolRank(ctx, req.(*FishPoolRankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fish_Sleep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FishSleepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishServer).Sleep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/new_world.v1.Fish/Sleep",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishServer).Sleep(ctx, req.(*FishSleepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fish_Alive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FishAliveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishServer).Alive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/new_world.v1.Fish/Alive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishServer).Alive(ctx, req.(*FishAliveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fish_Pull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FishPullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishServer).Pull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/new_world.v1.Fish/Pull",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishServer).Pull(ctx, req.(*FishPullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fish_ParkingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParkingListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishServer).ParkingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/new_world.v1.Fish/ParkingList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishServer).ParkingList(ctx, req.(*ParkingListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fish_DeadRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FishDeadRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishServer).DeadRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/new_world.v1.Fish/DeadRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishServer).DeadRecords(ctx, req.(*FishDeadRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fish_FishDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FishDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishServer).FishDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/new_world.v1.Fish/FishDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishServer).FishDetail(ctx, req.(*FishDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Fish_ServiceDesc is the grpc.ServiceDesc for Fish service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Fish_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "new_world.v1.Fish",
	HandlerType: (*FishServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Fish_List_Handler,
		},
		{
			MethodName: "DivestitureGodhead",
			Handler:    _Fish_DivestitureGodhead_Handler,
		},
		{
			MethodName: "Refining",
			Handler:    _Fish_Refining_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Fish_Create_Handler,
		},
		{
			MethodName: "PoolRank",
			Handler:    _Fish_PoolRank_Handler,
		},
		{
			MethodName: "Sleep",
			Handler:    _Fish_Sleep_Handler,
		},
		{
			MethodName: "Alive",
			Handler:    _Fish_Alive_Handler,
		},
		{
			MethodName: "Pull",
			Handler:    _Fish_Pull_Handler,
		},
		{
			MethodName: "ParkingList",
			Handler:    _Fish_ParkingList_Handler,
		},
		{
			MethodName: "DeadRecords",
			Handler:    _Fish_DeadRecords_Handler,
		},
		{
			MethodName: "FishDetail",
			Handler:    _Fish_FishDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/new-world-api/v1/fish.proto",
}
