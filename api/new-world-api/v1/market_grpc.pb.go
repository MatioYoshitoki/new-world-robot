// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: api/new-world-api/v1/market.proto

package apipb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MarketClient is the client API for Market service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarketClient interface {
	List(ctx context.Context, in *MarketListRequest, opts ...grpc.CallOption) (*MarketListResult, error)
	Detail(ctx context.Context, in *MarketDetailRequest, opts ...grpc.CallOption) (*MarketDetailResult, error)
	Sell(ctx context.Context, in *MarketSellRequest, opts ...grpc.CallOption) (*MarketSellResult, error)
	StopSell(ctx context.Context, in *MarketStopSellRequest, opts ...grpc.CallOption) (*MarketStopSellResult, error)
	Buy(ctx context.Context, in *MarketBuyRequest, opts ...grpc.CallOption) (*MarketBuyResult, error)
	MineList(ctx context.Context, in *MarketMineListRequest, opts ...grpc.CallOption) (*MarketMineListResult, error)
}

type marketClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketClient(cc grpc.ClientConnInterface) MarketClient {
	return &marketClient{cc}
}

func (c *marketClient) List(ctx context.Context, in *MarketListRequest, opts ...grpc.CallOption) (*MarketListResult, error) {
	out := new(MarketListResult)
	err := c.cc.Invoke(ctx, "/new_world.v1.Market/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) Detail(ctx context.Context, in *MarketDetailRequest, opts ...grpc.CallOption) (*MarketDetailResult, error) {
	out := new(MarketDetailResult)
	err := c.cc.Invoke(ctx, "/new_world.v1.Market/Detail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) Sell(ctx context.Context, in *MarketSellRequest, opts ...grpc.CallOption) (*MarketSellResult, error) {
	out := new(MarketSellResult)
	err := c.cc.Invoke(ctx, "/new_world.v1.Market/Sell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) StopSell(ctx context.Context, in *MarketStopSellRequest, opts ...grpc.CallOption) (*MarketStopSellResult, error) {
	out := new(MarketStopSellResult)
	err := c.cc.Invoke(ctx, "/new_world.v1.Market/StopSell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) Buy(ctx context.Context, in *MarketBuyRequest, opts ...grpc.CallOption) (*MarketBuyResult, error) {
	out := new(MarketBuyResult)
	err := c.cc.Invoke(ctx, "/new_world.v1.Market/Buy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) MineList(ctx context.Context, in *MarketMineListRequest, opts ...grpc.CallOption) (*MarketMineListResult, error) {
	out := new(MarketMineListResult)
	err := c.cc.Invoke(ctx, "/new_world.v1.Market/MineList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarketServer is the server API for Market service.
// All implementations must embed UnimplementedMarketServer
// for forward compatibility
type MarketServer interface {
	List(context.Context, *MarketListRequest) (*MarketListResult, error)
	Detail(context.Context, *MarketDetailRequest) (*MarketDetailResult, error)
	Sell(context.Context, *MarketSellRequest) (*MarketSellResult, error)
	StopSell(context.Context, *MarketStopSellRequest) (*MarketStopSellResult, error)
	Buy(context.Context, *MarketBuyRequest) (*MarketBuyResult, error)
	MineList(context.Context, *MarketMineListRequest) (*MarketMineListResult, error)
	mustEmbedUnimplementedMarketServer()
}

// UnimplementedMarketServer must be embedded to have forward compatible implementations.
type UnimplementedMarketServer struct {
}

func (UnimplementedMarketServer) List(context.Context, *MarketListRequest) (*MarketListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedMarketServer) Detail(context.Context, *MarketDetailRequest) (*MarketDetailResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Detail not implemented")
}
func (UnimplementedMarketServer) Sell(context.Context, *MarketSellRequest) (*MarketSellResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sell not implemented")
}
func (UnimplementedMarketServer) StopSell(context.Context, *MarketStopSellRequest) (*MarketStopSellResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopSell not implemented")
}
func (UnimplementedMarketServer) Buy(context.Context, *MarketBuyRequest) (*MarketBuyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Buy not implemented")
}
func (UnimplementedMarketServer) MineList(context.Context, *MarketMineListRequest) (*MarketMineListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MineList not implemented")
}
func (UnimplementedMarketServer) mustEmbedUnimplementedMarketServer() {}

// UnsafeMarketServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarketServer will
// result in compilation errors.
type UnsafeMarketServer interface {
	mustEmbedUnimplementedMarketServer()
}

func RegisterMarketServer(s grpc.ServiceRegistrar, srv MarketServer) {
	s.RegisterService(&Market_ServiceDesc, srv)
}

func _Market_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/new_world.v1.Market/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).List(ctx, req.(*MarketListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_Detail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).Detail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/new_world.v1.Market/Detail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).Detail(ctx, req.(*MarketDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_Sell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketSellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).Sell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/new_world.v1.Market/Sell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).Sell(ctx, req.(*MarketSellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_StopSell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketStopSellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).StopSell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/new_world.v1.Market/StopSell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).StopSell(ctx, req.(*MarketStopSellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_Buy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketBuyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).Buy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/new_world.v1.Market/Buy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).Buy(ctx, req.(*MarketBuyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_MineList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketMineListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).MineList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/new_world.v1.Market/MineList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).MineList(ctx, req.(*MarketMineListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Market_ServiceDesc is the grpc.ServiceDesc for Market service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Market_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "new_world.v1.Market",
	HandlerType: (*MarketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Market_List_Handler,
		},
		{
			MethodName: "Detail",
			Handler:    _Market_Detail_Handler,
		},
		{
			MethodName: "Sell",
			Handler:    _Market_Sell_Handler,
		},
		{
			MethodName: "StopSell",
			Handler:    _Market_StopSell_Handler,
		},
		{
			MethodName: "Buy",
			Handler:    _Market_Buy_Handler,
		},
		{
			MethodName: "MineList",
			Handler:    _Market_MineList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/new-world-api/v1/market.proto",
}
