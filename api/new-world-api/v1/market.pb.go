// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: api/new-world-api/v1/market.proto

package apipb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProductStatus int32

const (
	ProductStatus_up_sell   ProductStatus = 0
	ProductStatus_down_sell ProductStatus = 1
	ProductStatus_expired   ProductStatus = 2
	ProductStatus_complete  ProductStatus = 3
)

// Enum value maps for ProductStatus.
var (
	ProductStatus_name = map[int32]string{
		0: "up_sell",
		1: "down_sell",
		2: "expired",
		3: "complete",
	}
	ProductStatus_value = map[string]int32{
		"up_sell":   0,
		"down_sell": 1,
		"expired":   2,
		"complete":  3,
	}
)

func (x ProductStatus) Enum() *ProductStatus {
	p := new(ProductStatus)
	*p = x
	return p
}

func (x ProductStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProductStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_new_world_api_v1_market_proto_enumTypes[0].Descriptor()
}

func (ProductStatus) Type() protoreflect.EnumType {
	return &file_api_new_world_api_v1_market_proto_enumTypes[0]
}

func (x ProductStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProductStatus.Descriptor instead.
func (ProductStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_new_world_api_v1_market_proto_rawDescGZIP(), []int{0}
}

type SellDuration int32

const (
	SellDuration_half_day  SellDuration = 0
	SellDuration_one_day   SellDuration = 1
	SellDuration_three_day SellDuration = 2
	SellDuration_one_week  SellDuration = 3
)

// Enum value maps for SellDuration.
var (
	SellDuration_name = map[int32]string{
		0: "half_day",
		1: "one_day",
		2: "three_day",
		3: "one_week",
	}
	SellDuration_value = map[string]int32{
		"half_day":  0,
		"one_day":   1,
		"three_day": 2,
		"one_week":  3,
	}
)

func (x SellDuration) Enum() *SellDuration {
	p := new(SellDuration)
	*p = x
	return p
}

func (x SellDuration) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SellDuration) Descriptor() protoreflect.EnumDescriptor {
	return file_api_new_world_api_v1_market_proto_enumTypes[1].Descriptor()
}

func (SellDuration) Type() protoreflect.EnumType {
	return &file_api_new_world_api_v1_market_proto_enumTypes[1]
}

func (x SellDuration) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SellDuration.Descriptor instead.
func (SellDuration) EnumDescriptor() ([]byte, []int) {
	return file_api_new_world_api_v1_market_proto_rawDescGZIP(), []int{1}
}

type MarketListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FishId            int64   `protobuf:"varint,1,opt,name=fish_id,json=fishId,proto3" json:"fish_id,omitempty"`
	WeightStart       int64   `protobuf:"varint,2,opt,name=weight_start,json=weightStart,proto3" json:"weight_start,omitempty"`
	WeightEnd         int64   `protobuf:"varint,3,opt,name=weight_end,json=weightEnd,proto3" json:"weight_end,omitempty"`
	MaxHealStart      int64   `protobuf:"varint,4,opt,name=max_heal_start,json=maxHealStart,proto3" json:"max_heal_start,omitempty"`
	MaxHealEnd        int64   `protobuf:"varint,5,opt,name=max_heal_end,json=maxHealEnd,proto3" json:"max_heal_end,omitempty"`
	HealStart         int64   `protobuf:"varint,6,opt,name=heal_start,json=healStart,proto3" json:"heal_start,omitempty"`
	HealEnd           int64   `protobuf:"varint,7,opt,name=heal_end,json=healEnd,proto3" json:"heal_end,omitempty"`
	RecoverSpeedStart int64   `protobuf:"varint,8,opt,name=recover_speed_start,json=recoverSpeedStart,proto3" json:"recover_speed_start,omitempty"`
	RecoverSpeedEnd   int64   `protobuf:"varint,9,opt,name=recover_speed_end,json=recoverSpeedEnd,proto3" json:"recover_speed_end,omitempty"`
	AtkStart          int64   `protobuf:"varint,10,opt,name=atk_start,json=atkStart,proto3" json:"atk_start,omitempty"`
	AtkEnd            int64   `protobuf:"varint,11,opt,name=atk_end,json=atkEnd,proto3" json:"atk_end,omitempty"`
	DefStart          int64   `protobuf:"varint,12,opt,name=def_start,json=defStart,proto3" json:"def_start,omitempty"`
	DefEnd            int64   `protobuf:"varint,13,opt,name=def_end,json=defEnd,proto3" json:"def_end,omitempty"`
	EarnSpeedStart    int64   `protobuf:"varint,14,opt,name=earn_speed_start,json=earnSpeedStart,proto3" json:"earn_speed_start,omitempty"`
	EarnSpeedEnd      int64   `protobuf:"varint,15,opt,name=earn_speed_end,json=earnSpeedEnd,proto3" json:"earn_speed_end,omitempty"`
	DodgeStart        int32   `protobuf:"varint,16,opt,name=dodge_start,json=dodgeStart,proto3" json:"dodge_start,omitempty"`
	DodgeEnd          int32   `protobuf:"varint,17,opt,name=dodge_end,json=dodgeEnd,proto3" json:"dodge_end,omitempty"`
	PersonalityIds    []int32 `protobuf:"varint,18,rep,packed,name=personality_ids,json=personalityIds,proto3" json:"personality_ids,omitempty"`
	OwnSellFlag       int32   `protobuf:"varint,19,opt,name=own_sell_flag,json=ownSellFlag,proto3" json:"own_sell_flag,omitempty"`
	PriceStart        int64   `protobuf:"varint,20,opt,name=price_start,json=priceStart,proto3" json:"price_start,omitempty"`
	PriceEnd          int64   `protobuf:"varint,21,opt,name=price_end,json=priceEnd,proto3" json:"price_end,omitempty"`
	Page              int32   `protobuf:"varint,22,opt,name=page,proto3" json:"page,omitempty"`
	PageSize          int32   `protobuf:"varint,23,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *MarketListRequest) Reset() {
	*x = MarketListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_new_world_api_v1_market_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketListRequest) ProtoMessage() {}

func (x *MarketListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_new_world_api_v1_market_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketListRequest.ProtoReflect.Descriptor instead.
func (*MarketListRequest) Descriptor() ([]byte, []int) {
	return file_api_new_world_api_v1_market_proto_rawDescGZIP(), []int{0}
}

func (x *MarketListRequest) GetFishId() int64 {
	if x != nil {
		return x.FishId
	}
	return 0
}

func (x *MarketListRequest) GetWeightStart() int64 {
	if x != nil {
		return x.WeightStart
	}
	return 0
}

func (x *MarketListRequest) GetWeightEnd() int64 {
	if x != nil {
		return x.WeightEnd
	}
	return 0
}

func (x *MarketListRequest) GetMaxHealStart() int64 {
	if x != nil {
		return x.MaxHealStart
	}
	return 0
}

func (x *MarketListRequest) GetMaxHealEnd() int64 {
	if x != nil {
		return x.MaxHealEnd
	}
	return 0
}

func (x *MarketListRequest) GetHealStart() int64 {
	if x != nil {
		return x.HealStart
	}
	return 0
}

func (x *MarketListRequest) GetHealEnd() int64 {
	if x != nil {
		return x.HealEnd
	}
	return 0
}

func (x *MarketListRequest) GetRecoverSpeedStart() int64 {
	if x != nil {
		return x.RecoverSpeedStart
	}
	return 0
}

func (x *MarketListRequest) GetRecoverSpeedEnd() int64 {
	if x != nil {
		return x.RecoverSpeedEnd
	}
	return 0
}

func (x *MarketListRequest) GetAtkStart() int64 {
	if x != nil {
		return x.AtkStart
	}
	return 0
}

func (x *MarketListRequest) GetAtkEnd() int64 {
	if x != nil {
		return x.AtkEnd
	}
	return 0
}

func (x *MarketListRequest) GetDefStart() int64 {
	if x != nil {
		return x.DefStart
	}
	return 0
}

func (x *MarketListRequest) GetDefEnd() int64 {
	if x != nil {
		return x.DefEnd
	}
	return 0
}

func (x *MarketListRequest) GetEarnSpeedStart() int64 {
	if x != nil {
		return x.EarnSpeedStart
	}
	return 0
}

func (x *MarketListRequest) GetEarnSpeedEnd() int64 {
	if x != nil {
		return x.EarnSpeedEnd
	}
	return 0
}

func (x *MarketListRequest) GetDodgeStart() int32 {
	if x != nil {
		return x.DodgeStart
	}
	return 0
}

func (x *MarketListRequest) GetDodgeEnd() int32 {
	if x != nil {
		return x.DodgeEnd
	}
	return 0
}

func (x *MarketListRequest) GetPersonalityIds() []int32 {
	if x != nil {
		return x.PersonalityIds
	}
	return nil
}

func (x *MarketListRequest) GetOwnSellFlag() int32 {
	if x != nil {
		return x.OwnSellFlag
	}
	return 0
}

func (x *MarketListRequest) GetPriceStart() int64 {
	if x != nil {
		return x.PriceStart
	}
	return 0
}

func (x *MarketListRequest) GetPriceEnd() int64 {
	if x != nil {
		return x.PriceEnd
	}
	return 0
}

func (x *MarketListRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *MarketListRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type MarketListResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List        []*MarketListResult_FishInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	CurrentPage int32                        `protobuf:"varint,2,opt,name=current_page,json=currentPage,proto3" json:"current_page,omitempty"`
	PageSize    int32                        `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	TotalPage   int32                        `protobuf:"varint,4,opt,name=total_page,json=totalPage,proto3" json:"total_page,omitempty"`
}

func (x *MarketListResult) Reset() {
	*x = MarketListResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_new_world_api_v1_market_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketListResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketListResult) ProtoMessage() {}

func (x *MarketListResult) ProtoReflect() protoreflect.Message {
	mi := &file_api_new_world_api_v1_market_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketListResult.ProtoReflect.Descriptor instead.
func (*MarketListResult) Descriptor() ([]byte, []int) {
	return file_api_new_world_api_v1_market_proto_rawDescGZIP(), []int{1}
}

func (x *MarketListResult) GetList() []*MarketListResult_FishInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *MarketListResult) GetCurrentPage() int32 {
	if x != nil {
		return x.CurrentPage
	}
	return 0
}

func (x *MarketListResult) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *MarketListResult) GetTotalPage() int32 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

type MarketDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId int64 `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
}

func (x *MarketDetailRequest) Reset() {
	*x = MarketDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_new_world_api_v1_market_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDetailRequest) ProtoMessage() {}

func (x *MarketDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_new_world_api_v1_market_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDetailRequest.ProtoReflect.Descriptor instead.
func (*MarketDetailRequest) Descriptor() ([]byte, []int) {
	return file_api_new_world_api_v1_market_proto_rawDescGZIP(), []int{2}
}

func (x *MarketDetailRequest) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

type MarketDetailResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IconSourceId  int64  `protobuf:"varint,3,opt,name=icon_source_id,json=iconSourceId,proto3" json:"icon_source_id,omitempty"`
	Weight        int64  `protobuf:"varint,4,opt,name=weight,proto3" json:"weight,omitempty"`
	MaxHeal       int64  `protobuf:"varint,5,opt,name=max_heal,json=maxHeal,proto3" json:"max_heal,omitempty"`
	Heal          int64  `protobuf:"varint,6,opt,name=heal,proto3" json:"heal,omitempty"`
	RecoverSpeed  int64  `protobuf:"varint,7,opt,name=recover_speed,json=recoverSpeed,proto3" json:"recover_speed,omitempty"`
	Atk           int64  `protobuf:"varint,8,opt,name=atk,proto3" json:"atk,omitempty"`
	Def           int64  `protobuf:"varint,9,opt,name=def,proto3" json:"def,omitempty"`
	EarnSpeed     int64  `protobuf:"varint,10,opt,name=earn_speed,json=earnSpeed,proto3" json:"earn_speed,omitempty"`
	Dodge         int32  `protobuf:"varint,11,opt,name=dodge,proto3" json:"dodge,omitempty"`
	Money         int64  `protobuf:"varint,12,opt,name=money,proto3" json:"money,omitempty"`
	PersonalityId int64  `protobuf:"varint,13,opt,name=personality_id,json=personalityId,proto3" json:"personality_id,omitempty"`
}

func (x *MarketDetailResult) Reset() {
	*x = MarketDetailResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_new_world_api_v1_market_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDetailResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDetailResult) ProtoMessage() {}

func (x *MarketDetailResult) ProtoReflect() protoreflect.Message {
	mi := &file_api_new_world_api_v1_market_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDetailResult.ProtoReflect.Descriptor instead.
func (*MarketDetailResult) Descriptor() ([]byte, []int) {
	return file_api_new_world_api_v1_market_proto_rawDescGZIP(), []int{3}
}

func (x *MarketDetailResult) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MarketDetailResult) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MarketDetailResult) GetIconSourceId() int64 {
	if x != nil {
		return x.IconSourceId
	}
	return 0
}

func (x *MarketDetailResult) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *MarketDetailResult) GetMaxHeal() int64 {
	if x != nil {
		return x.MaxHeal
	}
	return 0
}

func (x *MarketDetailResult) GetHeal() int64 {
	if x != nil {
		return x.Heal
	}
	return 0
}

func (x *MarketDetailResult) GetRecoverSpeed() int64 {
	if x != nil {
		return x.RecoverSpeed
	}
	return 0
}

func (x *MarketDetailResult) GetAtk() int64 {
	if x != nil {
		return x.Atk
	}
	return 0
}

func (x *MarketDetailResult) GetDef() int64 {
	if x != nil {
		return x.Def
	}
	return 0
}

func (x *MarketDetailResult) GetEarnSpeed() int64 {
	if x != nil {
		return x.EarnSpeed
	}
	return 0
}

func (x *MarketDetailResult) GetDodge() int32 {
	if x != nil {
		return x.Dodge
	}
	return 0
}

func (x *MarketDetailResult) GetMoney() int64 {
	if x != nil {
		return x.Money
	}
	return 0
}

func (x *MarketDetailResult) GetPersonalityId() int64 {
	if x != nil {
		return x.PersonalityId
	}
	return 0
}

type MarketSellRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FishId       int64        `protobuf:"varint,1,opt,name=fish_id,json=fishId,proto3" json:"fish_id,omitempty"`
	SellDuration SellDuration `protobuf:"varint,2,opt,name=sell_duration,json=sellDuration,proto3,enum=new_world.v1.SellDuration" json:"sell_duration,omitempty"`
	Price        int64        `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *MarketSellRequest) Reset() {
	*x = MarketSellRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_new_world_api_v1_market_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketSellRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketSellRequest) ProtoMessage() {}

func (x *MarketSellRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_new_world_api_v1_market_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketSellRequest.ProtoReflect.Descriptor instead.
func (*MarketSellRequest) Descriptor() ([]byte, []int) {
	return file_api_new_world_api_v1_market_proto_rawDescGZIP(), []int{4}
}

func (x *MarketSellRequest) GetFishId() int64 {
	if x != nil {
		return x.FishId
	}
	return 0
}

func (x *MarketSellRequest) GetSellDuration() SellDuration {
	if x != nil {
		return x.SellDuration
	}
	return SellDuration_half_day
}

func (x *MarketSellRequest) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

type MarketStopSellRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId int64 `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
}

func (x *MarketStopSellRequest) Reset() {
	*x = MarketStopSellRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_new_world_api_v1_market_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketStopSellRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketStopSellRequest) ProtoMessage() {}

func (x *MarketStopSellRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_new_world_api_v1_market_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketStopSellRequest.ProtoReflect.Descriptor instead.
func (*MarketStopSellRequest) Descriptor() ([]byte, []int) {
	return file_api_new_world_api_v1_market_proto_rawDescGZIP(), []int{5}
}

func (x *MarketStopSellRequest) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

type MarketBuyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId int64 `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
}

func (x *MarketBuyRequest) Reset() {
	*x = MarketBuyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_new_world_api_v1_market_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketBuyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketBuyRequest) ProtoMessage() {}

func (x *MarketBuyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_new_world_api_v1_market_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketBuyRequest.ProtoReflect.Descriptor instead.
func (*MarketBuyRequest) Descriptor() ([]byte, []int) {
	return file_api_new_world_api_v1_market_proto_rawDescGZIP(), []int{6}
}

func (x *MarketBuyRequest) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

type MarketBuyResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId  int64  `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	BillId     int64  `protobuf:"varint,2,opt,name=bill_id,json=billId,proto3" json:"bill_id,omitempty"`
	FishId     int64  `protobuf:"varint,3,opt,name=fish_id,json=fishId,proto3" json:"fish_id,omitempty"`
	SellerUid  int64  `protobuf:"varint,4,opt,name=seller_uid,json=sellerUid,proto3" json:"seller_uid,omitempty"`
	FishName   string `protobuf:"bytes,5,opt,name=fish_name,json=fishName,proto3" json:"fish_name,omitempty"`
	SellerName string `protobuf:"bytes,6,opt,name=seller_name,json=sellerName,proto3" json:"seller_name,omitempty"`
	Price      int64  `protobuf:"varint,7,opt,name=price,proto3" json:"price,omitempty"`
	SettleTime string `protobuf:"bytes,8,opt,name=settle_time,json=settleTime,proto3" json:"settle_time,omitempty"`
}

func (x *MarketBuyResult) Reset() {
	*x = MarketBuyResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_new_world_api_v1_market_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketBuyResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketBuyResult) ProtoMessage() {}

func (x *MarketBuyResult) ProtoReflect() protoreflect.Message {
	mi := &file_api_new_world_api_v1_market_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketBuyResult.ProtoReflect.Descriptor instead.
func (*MarketBuyResult) Descriptor() ([]byte, []int) {
	return file_api_new_world_api_v1_market_proto_rawDescGZIP(), []int{7}
}

func (x *MarketBuyResult) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *MarketBuyResult) GetBillId() int64 {
	if x != nil {
		return x.BillId
	}
	return 0
}

func (x *MarketBuyResult) GetFishId() int64 {
	if x != nil {
		return x.FishId
	}
	return 0
}

func (x *MarketBuyResult) GetSellerUid() int64 {
	if x != nil {
		return x.SellerUid
	}
	return 0
}

func (x *MarketBuyResult) GetFishName() string {
	if x != nil {
		return x.FishName
	}
	return ""
}

func (x *MarketBuyResult) GetSellerName() string {
	if x != nil {
		return x.SellerName
	}
	return ""
}

func (x *MarketBuyResult) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *MarketBuyResult) GetSettleTime() string {
	if x != nil {
		return x.SettleTime
	}
	return ""
}

type MarketMineListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MarketMineListRequest) Reset() {
	*x = MarketMineListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_new_world_api_v1_market_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketMineListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketMineListRequest) ProtoMessage() {}

func (x *MarketMineListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_new_world_api_v1_market_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketMineListRequest.ProtoReflect.Descriptor instead.
func (*MarketMineListRequest) Descriptor() ([]byte, []int) {
	return file_api_new_world_api_v1_market_proto_rawDescGZIP(), []int{8}
}

type MarketMineListResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*MarketMineListResult_FishInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *MarketMineListResult) Reset() {
	*x = MarketMineListResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_new_world_api_v1_market_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketMineListResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketMineListResult) ProtoMessage() {}

func (x *MarketMineListResult) ProtoReflect() protoreflect.Message {
	mi := &file_api_new_world_api_v1_market_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketMineListResult.ProtoReflect.Descriptor instead.
func (*MarketMineListResult) Descriptor() ([]byte, []int) {
	return file_api_new_world_api_v1_market_proto_rawDescGZIP(), []int{9}
}

func (x *MarketMineListResult) GetList() []*MarketMineListResult_FishInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type MarketSellResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commission int64 `protobuf:"varint,1,opt,name=commission,proto3" json:"commission,omitempty"`
}

func (x *MarketSellResult) Reset() {
	*x = MarketSellResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_new_world_api_v1_market_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketSellResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketSellResult) ProtoMessage() {}

func (x *MarketSellResult) ProtoReflect() protoreflect.Message {
	mi := &file_api_new_world_api_v1_market_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketSellResult.ProtoReflect.Descriptor instead.
func (*MarketSellResult) Descriptor() ([]byte, []int) {
	return file_api_new_world_api_v1_market_proto_rawDescGZIP(), []int{10}
}

func (x *MarketSellResult) GetCommission() int64 {
	if x != nil {
		return x.Commission
	}
	return 0
}

type MarketStopSellResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MarketStopSellResult) Reset() {
	*x = MarketStopSellResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_new_world_api_v1_market_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketStopSellResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketStopSellResult) ProtoMessage() {}

func (x *MarketStopSellResult) ProtoReflect() protoreflect.Message {
	mi := &file_api_new_world_api_v1_market_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketStopSellResult.ProtoReflect.Descriptor instead.
func (*MarketStopSellResult) Descriptor() ([]byte, []int) {
	return file_api_new_world_api_v1_market_proto_rawDescGZIP(), []int{11}
}

type MarketListResult_FishInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId      int64             `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	FishId         int64             `protobuf:"varint,2,opt,name=fish_id,json=fishId,proto3" json:"fish_id,omitempty"`
	Weight         int64             `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`
	MasterUid      int64             `protobuf:"varint,4,opt,name=master_uid,json=masterUid,proto3" json:"master_uid,omitempty"`
	FishName       string            `protobuf:"bytes,5,opt,name=fish_name,json=fishName,proto3" json:"fish_name,omitempty"`
	IconSourceId   int64             `protobuf:"varint,6,opt,name=icon_source_id,json=iconSourceId,proto3" json:"icon_source_id,omitempty"`
	MasterName     string            `protobuf:"bytes,7,opt,name=master_name,json=masterName,proto3" json:"master_name,omitempty"`
	Price          int64             `protobuf:"varint,8,opt,name=price,proto3" json:"price,omitempty"`
	SellTimeRemain int64             `protobuf:"varint,9,opt,name=sell_time_remain,json=sellTimeRemain,proto3" json:"sell_time_remain,omitempty"`
	Extra          map[string]string `protobuf:"bytes,10,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 显示搜索条件的数值
}

func (x *MarketListResult_FishInfo) Reset() {
	*x = MarketListResult_FishInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_new_world_api_v1_market_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketListResult_FishInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketListResult_FishInfo) ProtoMessage() {}

func (x *MarketListResult_FishInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_new_world_api_v1_market_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketListResult_FishInfo.ProtoReflect.Descriptor instead.
func (*MarketListResult_FishInfo) Descriptor() ([]byte, []int) {
	return file_api_new_world_api_v1_market_proto_rawDescGZIP(), []int{1, 0}
}

func (x *MarketListResult_FishInfo) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *MarketListResult_FishInfo) GetFishId() int64 {
	if x != nil {
		return x.FishId
	}
	return 0
}

func (x *MarketListResult_FishInfo) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *MarketListResult_FishInfo) GetMasterUid() int64 {
	if x != nil {
		return x.MasterUid
	}
	return 0
}

func (x *MarketListResult_FishInfo) GetFishName() string {
	if x != nil {
		return x.FishName
	}
	return ""
}

func (x *MarketListResult_FishInfo) GetIconSourceId() int64 {
	if x != nil {
		return x.IconSourceId
	}
	return 0
}

func (x *MarketListResult_FishInfo) GetMasterName() string {
	if x != nil {
		return x.MasterName
	}
	return ""
}

func (x *MarketListResult_FishInfo) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *MarketListResult_FishInfo) GetSellTimeRemain() int64 {
	if x != nil {
		return x.SellTimeRemain
	}
	return 0
}

func (x *MarketListResult_FishInfo) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type MarketMineListResult_FishInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId      int64  `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	FishId         int64  `protobuf:"varint,2,opt,name=fish_id,json=fishId,proto3" json:"fish_id,omitempty"`
	Weight         int64  `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`
	MasterUid      int64  `protobuf:"varint,4,opt,name=master_uid,json=masterUid,proto3" json:"master_uid,omitempty"`
	FishName       string `protobuf:"bytes,5,opt,name=fish_name,json=fishName,proto3" json:"fish_name,omitempty"`
	IconSourceId   int64  `protobuf:"varint,6,opt,name=icon_source_id,json=iconSourceId,proto3" json:"icon_source_id,omitempty"`
	MasterName     string `protobuf:"bytes,7,opt,name=master_name,json=masterName,proto3" json:"master_name,omitempty"`
	Price          int64  `protobuf:"varint,8,opt,name=price,proto3" json:"price,omitempty"`
	SellTimeRemain int64  `protobuf:"varint,9,opt,name=sell_time_remain,json=sellTimeRemain,proto3" json:"sell_time_remain,omitempty"`
}

func (x *MarketMineListResult_FishInfo) Reset() {
	*x = MarketMineListResult_FishInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_new_world_api_v1_market_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketMineListResult_FishInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketMineListResult_FishInfo) ProtoMessage() {}

func (x *MarketMineListResult_FishInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_new_world_api_v1_market_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketMineListResult_FishInfo.ProtoReflect.Descriptor instead.
func (*MarketMineListResult_FishInfo) Descriptor() ([]byte, []int) {
	return file_api_new_world_api_v1_market_proto_rawDescGZIP(), []int{9, 0}
}

func (x *MarketMineListResult_FishInfo) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *MarketMineListResult_FishInfo) GetFishId() int64 {
	if x != nil {
		return x.FishId
	}
	return 0
}

func (x *MarketMineListResult_FishInfo) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *MarketMineListResult_FishInfo) GetMasterUid() int64 {
	if x != nil {
		return x.MasterUid
	}
	return 0
}

func (x *MarketMineListResult_FishInfo) GetFishName() string {
	if x != nil {
		return x.FishName
	}
	return ""
}

func (x *MarketMineListResult_FishInfo) GetIconSourceId() int64 {
	if x != nil {
		return x.IconSourceId
	}
	return 0
}

func (x *MarketMineListResult_FishInfo) GetMasterName() string {
	if x != nil {
		return x.MasterName
	}
	return ""
}

func (x *MarketMineListResult_FishInfo) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *MarketMineListResult_FishInfo) GetSellTimeRemain() int64 {
	if x != nil {
		return x.SellTimeRemain
	}
	return 0
}

var File_api_new_world_api_v1_market_proto protoreflect.FileDescriptor

var file_api_new_world_api_v1_market_proto_rawDesc = []byte{
	0x0a, 0x21, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x77, 0x2d, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2d,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76,
	0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x82, 0x06, 0x0a, 0x11, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x73, 0x68, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x69, 0x73, 0x68, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x45, 0x6e, 0x64,
	0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x48, 0x65, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x68, 0x65,
	0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x61,
	0x78, 0x48, 0x65, 0x61, 0x6c, 0x45, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x6c,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x65,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x6c, 0x5f,
	0x65, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x68, 0x65, 0x61, 0x6c, 0x45,
	0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x45, 0x6e, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x61, 0x74, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x61, 0x74, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x61,
	0x74, 0x6b, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x74,
	0x6b, 0x45, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x65, 0x66, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x64, 0x65, 0x66, 0x45, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x61,
	0x72, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x61, 0x72, 0x6e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x61,
	0x72, 0x6e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x45, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6f,
	0x64, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x64, 0x6f, 0x64, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x6f, 0x64, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x64, 0x6f, 0x64, 0x67, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x77, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x77, 0x6e, 0x53, 0x65, 0x6c,
	0x6c, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x65, 0x6e, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x45, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x22, 0xd2, 0x04, 0x0a, 0x10, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3b, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x77, 0x6f,
	0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x46, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x50, 0x61, 0x67, 0x65, 0x1a, 0xa1, 0x03, 0x0a, 0x08, 0x46, 0x69, 0x73, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x73, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x66, 0x69, 0x73, 0x68, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x55, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x73, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x69, 0x63, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73,
	0x65, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x48, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x2e, 0x46, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a,
	0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x34, 0x0a, 0x13, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x22,
	0xe0, 0x02, 0x0a, 0x12, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x63,
	0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x69, 0x63, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f,
	0x68, 0x65, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x48,
	0x65, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x68, 0x65, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x74, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x61, 0x74, 0x6b, 0x12, 0x10,
	0x0a, 0x03, 0x64, 0x65, 0x66, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x64, 0x65, 0x66,
	0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x61, 0x72, 0x6e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x64, 0x6f, 0x64, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x64, 0x6f, 0x64, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x11, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x73, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x69, 0x73, 0x68, 0x49,
	0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6c, 0x6c, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x65, 0x6c, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x36, 0x0a, 0x15, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64,
	0x22, 0x31, 0x0a, 0x10, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x42, 0x75, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x22, 0xf6, 0x01, 0x0a, 0x0f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x42, 0x75,
	0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x62, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x66, 0x69, 0x73, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x66, 0x69, 0x73, 0x68, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x73, 0x68, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x73, 0x68,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x17, 0x0a, 0x15,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xf7, 0x02, 0x0a, 0x14, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x4d, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3f,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e,
	0x65, 0x77, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x4d, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x2e, 0x46, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x1a,
	0x9d, 0x02, 0x0a, 0x08, 0x46, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66,
	0x69, 0x73, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x69,
	0x73, 0x68, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x69, 0x73, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x63, 0x6f, 0x6e,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x69, 0x63, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x73, 0x65, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x22,
	0x32, 0x0a, 0x10, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x16, 0x0a, 0x14, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x6f,
	0x70, 0x53, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2a, 0x46, 0x0a, 0x0d, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07,
	0x75, 0x70, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x6f, 0x77,
	0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x10, 0x03, 0x2a, 0x46, 0x0a, 0x0c, 0x53, 0x65, 0x6c, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x08, 0x68, 0x61, 0x6c, 0x66, 0x5f, 0x64, 0x61, 0x79, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x6f, 0x6e, 0x65, 0x5f, 0x64, 0x61, 0x79, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x65, 0x5f, 0x64, 0x61, 0x79, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x6f, 0x6e, 0x65, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x10, 0x03, 0x32, 0xa5, 0x05, 0x0a, 0x06,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x67, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f,
	0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x01, 0x2a, 0x12,
	0x6f, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x21, 0x2e, 0x6e, 0x65, 0x77, 0x5f,
	0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6e,
	0x65, 0x77, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x20,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x3a, 0x01, 0x2a,
	0x12, 0x6d, 0x0a, 0x04, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x1f, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x65,
	0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6e, 0x65, 0x77, 0x5f,
	0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53,
	0x65, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1e, 0x22, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2f, 0x73, 0x65, 0x6c, 0x6c, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x3a, 0x01, 0x2a, 0x12,
	0x78, 0x0a, 0x08, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x23, 0x2e, 0x6e, 0x65,
	0x77, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x65, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2f, 0x73, 0x65, 0x6c,
	0x6c, 0x2f, 0x73, 0x74, 0x6f, 0x70, 0x3a, 0x01, 0x2a, 0x12, 0x63, 0x0a, 0x03, 0x42, 0x75, 0x79,
	0x12, 0x1e, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x42, 0x75, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x42, 0x75, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2f, 0x62, 0x75, 0x79, 0x3a, 0x01, 0x2a, 0x12, 0x73,
	0x0a, 0x08, 0x4d, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x2e, 0x6e, 0x65, 0x77,
	0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x4d, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2f, 0x6d, 0x69, 0x6e, 0x65,
	0x3a, 0x01, 0x2a, 0x42, 0x52, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x2e, 0x77, 0x6f, 0x72, 0x6c, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x42, 0x0d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x56, 0x31, 0x50,
	0x01, 0x5a, 0x24, 0x6e, 0x65, 0x77, 0x2d, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x6e, 0x65, 0x77, 0x2d, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x3b, 0x61, 0x70, 0x69, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_new_world_api_v1_market_proto_rawDescOnce sync.Once
	file_api_new_world_api_v1_market_proto_rawDescData = file_api_new_world_api_v1_market_proto_rawDesc
)

func file_api_new_world_api_v1_market_proto_rawDescGZIP() []byte {
	file_api_new_world_api_v1_market_proto_rawDescOnce.Do(func() {
		file_api_new_world_api_v1_market_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_new_world_api_v1_market_proto_rawDescData)
	})
	return file_api_new_world_api_v1_market_proto_rawDescData
}

var file_api_new_world_api_v1_market_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_api_new_world_api_v1_market_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_api_new_world_api_v1_market_proto_goTypes = []interface{}{
	(ProductStatus)(0),                    // 0: new_world.v1.ProductStatus
	(SellDuration)(0),                     // 1: new_world.v1.SellDuration
	(*MarketListRequest)(nil),             // 2: new_world.v1.MarketListRequest
	(*MarketListResult)(nil),              // 3: new_world.v1.MarketListResult
	(*MarketDetailRequest)(nil),           // 4: new_world.v1.MarketDetailRequest
	(*MarketDetailResult)(nil),            // 5: new_world.v1.MarketDetailResult
	(*MarketSellRequest)(nil),             // 6: new_world.v1.MarketSellRequest
	(*MarketStopSellRequest)(nil),         // 7: new_world.v1.MarketStopSellRequest
	(*MarketBuyRequest)(nil),              // 8: new_world.v1.MarketBuyRequest
	(*MarketBuyResult)(nil),               // 9: new_world.v1.MarketBuyResult
	(*MarketMineListRequest)(nil),         // 10: new_world.v1.MarketMineListRequest
	(*MarketMineListResult)(nil),          // 11: new_world.v1.MarketMineListResult
	(*MarketSellResult)(nil),              // 12: new_world.v1.MarketSellResult
	(*MarketStopSellResult)(nil),          // 13: new_world.v1.MarketStopSellResult
	(*MarketListResult_FishInfo)(nil),     // 14: new_world.v1.MarketListResult.FishInfo
	nil,                                   // 15: new_world.v1.MarketListResult.FishInfo.ExtraEntry
	(*MarketMineListResult_FishInfo)(nil), // 16: new_world.v1.MarketMineListResult.FishInfo
}
var file_api_new_world_api_v1_market_proto_depIdxs = []int32{
	14, // 0: new_world.v1.MarketListResult.list:type_name -> new_world.v1.MarketListResult.FishInfo
	1,  // 1: new_world.v1.MarketSellRequest.sell_duration:type_name -> new_world.v1.SellDuration
	16, // 2: new_world.v1.MarketMineListResult.list:type_name -> new_world.v1.MarketMineListResult.FishInfo
	15, // 3: new_world.v1.MarketListResult.FishInfo.extra:type_name -> new_world.v1.MarketListResult.FishInfo.ExtraEntry
	2,  // 4: new_world.v1.Market.List:input_type -> new_world.v1.MarketListRequest
	4,  // 5: new_world.v1.Market.Detail:input_type -> new_world.v1.MarketDetailRequest
	6,  // 6: new_world.v1.Market.Sell:input_type -> new_world.v1.MarketSellRequest
	7,  // 7: new_world.v1.Market.StopSell:input_type -> new_world.v1.MarketStopSellRequest
	8,  // 8: new_world.v1.Market.Buy:input_type -> new_world.v1.MarketBuyRequest
	10, // 9: new_world.v1.Market.MineList:input_type -> new_world.v1.MarketMineListRequest
	3,  // 10: new_world.v1.Market.List:output_type -> new_world.v1.MarketListResult
	5,  // 11: new_world.v1.Market.Detail:output_type -> new_world.v1.MarketDetailResult
	12, // 12: new_world.v1.Market.Sell:output_type -> new_world.v1.MarketSellResult
	13, // 13: new_world.v1.Market.StopSell:output_type -> new_world.v1.MarketStopSellResult
	9,  // 14: new_world.v1.Market.Buy:output_type -> new_world.v1.MarketBuyResult
	11, // 15: new_world.v1.Market.MineList:output_type -> new_world.v1.MarketMineListResult
	10, // [10:16] is the sub-list for method output_type
	4,  // [4:10] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_api_new_world_api_v1_market_proto_init() }
func file_api_new_world_api_v1_market_proto_init() {
	if File_api_new_world_api_v1_market_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_new_world_api_v1_market_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_new_world_api_v1_market_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketListResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_new_world_api_v1_market_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_new_world_api_v1_market_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDetailResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_new_world_api_v1_market_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketSellRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_new_world_api_v1_market_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketStopSellRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_new_world_api_v1_market_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketBuyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_new_world_api_v1_market_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketBuyResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_new_world_api_v1_market_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketMineListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_new_world_api_v1_market_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketMineListResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_new_world_api_v1_market_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketSellResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_new_world_api_v1_market_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketStopSellResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_new_world_api_v1_market_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketListResult_FishInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_new_world_api_v1_market_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketMineListResult_FishInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_new_world_api_v1_market_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_new_world_api_v1_market_proto_goTypes,
		DependencyIndexes: file_api_new_world_api_v1_market_proto_depIdxs,
		EnumInfos:         file_api_new_world_api_v1_market_proto_enumTypes,
		MessageInfos:      file_api_new_world_api_v1_market_proto_msgTypes,
	}.Build()
	File_api_new_world_api_v1_market_proto = out.File
	file_api_new_world_api_v1_market_proto_rawDesc = nil
	file_api_new_world_api_v1_market_proto_goTypes = nil
	file_api_new_world_api_v1_market_proto_depIdxs = nil
}
