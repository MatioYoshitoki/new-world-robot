// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: api/new-world-api/v1/fish.proto

package apipb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	v1 "new-world-robot/api/shared/v1"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Parking int32

const (
	Parking_Q Parking = 0
	Parking_W Parking = 1
	Parking_E Parking = 2
	Parking_R Parking = 3
	Parking_A Parking = 4
	Parking_F Parking = 5
)

// Enum value maps for Parking.
var (
	Parking_name = map[int32]string{
		0: "Q",
		1: "W",
		2: "E",
		3: "R",
		4: "A",
		5: "F",
	}
	Parking_value = map[string]int32{
		"Q": 0,
		"W": 1,
		"E": 2,
		"R": 3,
		"A": 4,
		"F": 5,
	}
)

func (x Parking) Enum() *Parking {
	p := new(Parking)
	*p = x
	return p
}

func (x Parking) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Parking) Descriptor() protoreflect.EnumDescriptor {
	return file_api_new_world_api_v1_fish_proto_enumTypes[0].Descriptor()
}

func (Parking) Type() protoreflect.EnumType {
	return &file_api_new_world_api_v1_fish_proto_enumTypes[0]
}

func (x Parking) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Parking.Descriptor instead.
func (Parking) EnumDescriptor() ([]byte, []int) {
	return file_api_new_world_api_v1_fish_proto_rawDescGZIP(), []int{0}
}

type DivestitureGodheadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FishId    string `protobuf:"bytes,1,opt,name=fish_id,json=fishId,proto3" json:"fish_id,omitempty"`
	GodheadId string `protobuf:"bytes,2,opt,name=godhead_id,json=godheadId,proto3" json:"godhead_id,omitempty"`
}

func (x *DivestitureGodheadRequest) Reset() {
	*x = DivestitureGodheadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_new_world_api_v1_fish_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DivestitureGodheadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DivestitureGodheadRequest) ProtoMessage() {}

func (x *DivestitureGodheadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_new_world_api_v1_fish_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DivestitureGodheadRequest.ProtoReflect.Descriptor instead.
func (*DivestitureGodheadRequest) Descriptor() ([]byte, []int) {
	return file_api_new_world_api_v1_fish_proto_rawDescGZIP(), []int{0}
}

func (x *DivestitureGodheadRequest) GetFishId() string {
	if x != nil {
		return x.FishId
	}
	return ""
}

func (x *DivestitureGodheadRequest) GetGodheadId() string {
	if x != nil {
		return x.GodheadId
	}
	return ""
}

type DivestitureGodheadResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PropId     string `protobuf:"bytes,1,opt,name=prop_id,json=propId,proto3" json:"prop_id,omitempty"`
	PropType   int32  `protobuf:"varint,2,opt,name=prop_type,json=propType,proto3" json:"prop_type,omitempty"`
	PropName   string `protobuf:"bytes,3,opt,name=prop_name,json=propName,proto3" json:"prop_name,omitempty"`
	PropRemark string `protobuf:"bytes,4,opt,name=prop_remark,json=propRemark,proto3" json:"prop_remark,omitempty"`
	Price      int64  `protobuf:"varint,5,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *DivestitureGodheadResult) Reset() {
	*x = DivestitureGodheadResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_new_world_api_v1_fish_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DivestitureGodheadResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DivestitureGodheadResult) ProtoMessage() {}

func (x *DivestitureGodheadResult) ProtoReflect() protoreflect.Message {
	mi := &file_api_new_world_api_v1_fish_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DivestitureGodheadResult.ProtoReflect.Descriptor instead.
func (*DivestitureGodheadResult) Descriptor() ([]byte, []int) {
	return file_api_new_world_api_v1_fish_proto_rawDescGZIP(), []int{1}
}

func (x *DivestitureGodheadResult) GetPropId() string {
	if x != nil {
		return x.PropId
	}
	return ""
}

func (x *DivestitureGodheadResult) GetPropType() int32 {
	if x != nil {
		return x.PropType
	}
	return 0
}

func (x *DivestitureGodheadResult) GetPropName() string {
	if x != nil {
		return x.PropName
	}
	return ""
}

func (x *DivestitureGodheadResult) GetPropRemark() string {
	if x != nil {
		return x.PropRemark
	}
	return ""
}

func (x *DivestitureGodheadResult) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

type FishListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FishListRequest) Reset() {
	*x = FishListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_new_world_api_v1_fish_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FishListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FishListRequest) ProtoMessage() {}

func (x *FishListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_new_world_api_v1_fish_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FishListRequest.ProtoReflect.Descriptor instead.
func (*FishListRequest) Descriptor() ([]byte, []int) {
	return file_api_new_world_api_v1_fish_proto_rawDescGZIP(), []int{2}
}

type FishPullRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FishPullRequest) Reset() {
	*x = FishPullRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_new_world_api_v1_fish_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FishPullRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FishPullRequest) ProtoMessage() {}

func (x *FishPullRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_new_world_api_v1_fish_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FishPullRequest.ProtoReflect.Descriptor instead.
func (*FishPullRequest) Descriptor() ([]byte, []int) {
	return file_api_new_world_api_v1_fish_proto_rawDescGZIP(), []int{3}
}

type FishRefiningRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FishId string `protobuf:"bytes,1,opt,name=fish_id,json=fishId,proto3" json:"fish_id,omitempty"`
}

func (x *FishRefiningRequest) Reset() {
	*x = FishRefiningRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_new_world_api_v1_fish_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FishRefiningRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FishRefiningRequest) ProtoMessage() {}

func (x *FishRefiningRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_new_world_api_v1_fish_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FishRefiningRequest.ProtoReflect.Descriptor instead.
func (*FishRefiningRequest) Descriptor() ([]byte, []int) {
	return file_api_new_world_api_v1_fish_proto_rawDescGZIP(), []int{4}
}

func (x *FishRefiningRequest) GetFishId() string {
	if x != nil {
		return x.FishId
	}
	return ""
}

type ParkingListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ParkingListRequest) Reset() {
	*x = ParkingListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_new_world_api_v1_fish_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParkingListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParkingListRequest) ProtoMessage() {}

func (x *ParkingListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_new_world_api_v1_fish_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParkingListRequest.ProtoReflect.Descriptor instead.
func (*ParkingListRequest) Descriptor() ([]byte, []int) {
	return file_api_new_world_api_v1_fish_proto_rawDescGZIP(), []int{5}
}

type ParkingListResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParkingList []*ParkingListResult_ParkingDetail `protobuf:"bytes,1,rep,name=parking_list,json=parkingList,proto3" json:"parking_list,omitempty"`
}

func (x *ParkingListResult) Reset() {
	*x = ParkingListResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_new_world_api_v1_fish_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParkingListResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParkingListResult) ProtoMessage() {}

func (x *ParkingListResult) ProtoReflect() protoreflect.Message {
	mi := &file_api_new_world_api_v1_fish_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParkingListResult.ProtoReflect.Descriptor instead.
func (*ParkingListResult) Descriptor() ([]byte, []int) {
	return file_api_new_world_api_v1_fish_proto_rawDescGZIP(), []int{6}
}

func (x *ParkingListResult) GetParkingList() []*ParkingListResult_ParkingDetail {
	if x != nil {
		return x.ParkingList
	}
	return nil
}

type FishCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FishCreateRequest) Reset() {
	*x = FishCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_new_world_api_v1_fish_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FishCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FishCreateRequest) ProtoMessage() {}

func (x *FishCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_new_world_api_v1_fish_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FishCreateRequest.ProtoReflect.Descriptor instead.
func (*FishCreateRequest) Descriptor() ([]byte, []int) {
	return file_api_new_world_api_v1_fish_proto_rawDescGZIP(), []int{7}
}

type FishCreateResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              *string            `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Name            *string            `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	IconSourceId    *int64             `protobuf:"varint,3,opt,name=icon_source_id,json=iconSourceId,proto3,oneof" json:"icon_source_id,omitempty"`
	Weight          *int64             `protobuf:"varint,4,opt,name=weight,proto3,oneof" json:"weight,omitempty"`
	MaxHeal         *int64             `protobuf:"varint,5,opt,name=max_heal,json=maxHeal,proto3,oneof" json:"max_heal,omitempty"`
	Heal            *int64             `protobuf:"varint,6,opt,name=heal,proto3,oneof" json:"heal,omitempty"`
	RecoverSpeed    *int64             `protobuf:"varint,7,opt,name=recover_speed,json=recoverSpeed,proto3,oneof" json:"recover_speed,omitempty"`
	Atk             *int64             `protobuf:"varint,8,opt,name=atk,proto3,oneof" json:"atk,omitempty"`
	Def             *int64             `protobuf:"varint,9,opt,name=def,proto3,oneof" json:"def,omitempty"`
	EarnSpeed       *int64             `protobuf:"varint,10,opt,name=earn_speed,json=earnSpeed,proto3,oneof" json:"earn_speed,omitempty"`
	Dodge           *int32             `protobuf:"varint,11,opt,name=dodge,proto3,oneof" json:"dodge,omitempty"`
	Money           *int64             `protobuf:"varint,12,opt,name=money,proto3,oneof" json:"money,omitempty"`
	Status          *v1.FishStatus     `protobuf:"varint,13,opt,name=status,proto3,enum=shared.v1.FishStatus,oneof" json:"status,omitempty"`
	PersonalityId   *int32             `protobuf:"varint,14,opt,name=personality_id,json=personalityId,proto3,oneof" json:"personality_id,omitempty"`
	Parking         *string            `protobuf:"bytes,15,opt,name=parking,proto3,oneof" json:"parking,omitempty"`
	PersonalityName string             `protobuf:"bytes,16,opt,name=personality_name,json=personalityName,proto3" json:"personality_name,omitempty"`
	ProtectCount    *int32             `protobuf:"varint,17,opt,name=protect_count,json=protectCount,proto3,oneof" json:"protect_count,omitempty"`
	AwakingRemain   *int32             `protobuf:"varint,18,opt,name=awaking_remain,json=awakingRemain,proto3,oneof" json:"awaking_remain,omitempty"`
	Rating          *int32             `protobuf:"varint,19,opt,name=rating,proto3,oneof" json:"rating,omitempty"`
	Level           *int32             `protobuf:"varint,20,opt,name=level,proto3,oneof" json:"level,omitempty"`
	FishStatistics  *v1.FishStatistics `protobuf:"bytes,21,opt,name=fish_statistics,json=fishStatistics,proto3" json:"fish_statistics,omitempty"`
}

func (x *FishCreateResult) Reset() {
	*x = FishCreateResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_new_world_api_v1_fish_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FishCreateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FishCreateResult) ProtoMessage() {}

func (x *FishCreateResult) ProtoReflect() protoreflect.Message {
	mi := &file_api_new_world_api_v1_fish_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FishCreateResult.ProtoReflect.Descriptor instead.
func (*FishCreateResult) Descriptor() ([]byte, []int) {
	return file_api_new_world_api_v1_fish_proto_rawDescGZIP(), []int{8}
}

func (x *FishCreateResult) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *FishCreateResult) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *FishCreateResult) GetIconSourceId() int64 {
	if x != nil && x.IconSourceId != nil {
		return *x.IconSourceId
	}
	return 0
}

func (x *FishCreateResult) GetWeight() int64 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *FishCreateResult) GetMaxHeal() int64 {
	if x != nil && x.MaxHeal != nil {
		return *x.MaxHeal
	}
	return 0
}

func (x *FishCreateResult) GetHeal() int64 {
	if x != nil && x.Heal != nil {
		return *x.Heal
	}
	return 0
}

func (x *FishCreateResult) GetRecoverSpeed() int64 {
	if x != nil && x.RecoverSpeed != nil {
		return *x.RecoverSpeed
	}
	return 0
}

func (x *FishCreateResult) GetAtk() int64 {
	if x != nil && x.Atk != nil {
		return *x.Atk
	}
	return 0
}

func (x *FishCreateResult) GetDef() int64 {
	if x != nil && x.Def != nil {
		return *x.Def
	}
	return 0
}

func (x *FishCreateResult) GetEarnSpeed() int64 {
	if x != nil && x.EarnSpeed != nil {
		return *x.EarnSpeed
	}
	return 0
}

func (x *FishCreateResult) GetDodge() int32 {
	if x != nil && x.Dodge != nil {
		return *x.Dodge
	}
	return 0
}

func (x *FishCreateResult) GetMoney() int64 {
	if x != nil && x.Money != nil {
		return *x.Money
	}
	return 0
}

func (x *FishCreateResult) GetStatus() v1.FishStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return v1.FishStatus(0)
}

func (x *FishCreateResult) GetPersonalityId() int32 {
	if x != nil && x.PersonalityId != nil {
		return *x.PersonalityId
	}
	return 0
}

func (x *FishCreateResult) GetParking() string {
	if x != nil && x.Parking != nil {
		return *x.Parking
	}
	return ""
}

func (x *FishCreateResult) GetPersonalityName() string {
	if x != nil {
		return x.PersonalityName
	}
	return ""
}

func (x *FishCreateResult) GetProtectCount() int32 {
	if x != nil && x.ProtectCount != nil {
		return *x.ProtectCount
	}
	return 0
}

func (x *FishCreateResult) GetAwakingRemain() int32 {
	if x != nil && x.AwakingRemain != nil {
		return *x.AwakingRemain
	}
	return 0
}

func (x *FishCreateResult) GetRating() int32 {
	if x != nil && x.Rating != nil {
		return *x.Rating
	}
	return 0
}

func (x *FishCreateResult) GetLevel() int32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *FishCreateResult) GetFishStatistics() *v1.FishStatistics {
	if x != nil {
		return x.FishStatistics
	}
	return nil
}

type FishSleepRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FishId int64 `protobuf:"varint,1,opt,name=fish_id,json=fishId,proto3" json:"fish_id,omitempty"`
}

func (x *FishSleepRequest) Reset() {
	*x = FishSleepRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_new_world_api_v1_fish_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FishSleepRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FishSleepRequest) ProtoMessage() {}

func (x *FishSleepRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_new_world_api_v1_fish_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FishSleepRequest.ProtoReflect.Descriptor instead.
func (*FishSleepRequest) Descriptor() ([]byte, []int) {
	return file_api_new_world_api_v1_fish_proto_rawDescGZIP(), []int{9}
}

func (x *FishSleepRequest) GetFishId() int64 {
	if x != nil {
		return x.FishId
	}
	return 0
}

type FishSleepResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FishSleepResult) Reset() {
	*x = FishSleepResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_new_world_api_v1_fish_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FishSleepResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FishSleepResult) ProtoMessage() {}

func (x *FishSleepResult) ProtoReflect() protoreflect.Message {
	mi := &file_api_new_world_api_v1_fish_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FishSleepResult.ProtoReflect.Descriptor instead.
func (*FishSleepResult) Descriptor() ([]byte, []int) {
	return file_api_new_world_api_v1_fish_proto_rawDescGZIP(), []int{10}
}

type FishAliveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FishId string `protobuf:"bytes,1,opt,name=fish_id,json=fishId,proto3" json:"fish_id,omitempty"`
}

func (x *FishAliveRequest) Reset() {
	*x = FishAliveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_new_world_api_v1_fish_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FishAliveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FishAliveRequest) ProtoMessage() {}

func (x *FishAliveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_new_world_api_v1_fish_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FishAliveRequest.ProtoReflect.Descriptor instead.
func (*FishAliveRequest) Descriptor() ([]byte, []int) {
	return file_api_new_world_api_v1_fish_proto_rawDescGZIP(), []int{11}
}

func (x *FishAliveRequest) GetFishId() string {
	if x != nil {
		return x.FishId
	}
	return ""
}

type FishAliveResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FishAliveResult) Reset() {
	*x = FishAliveResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_new_world_api_v1_fish_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FishAliveResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FishAliveResult) ProtoMessage() {}

func (x *FishAliveResult) ProtoReflect() protoreflect.Message {
	mi := &file_api_new_world_api_v1_fish_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FishAliveResult.ProtoReflect.Descriptor instead.
func (*FishAliveResult) Descriptor() ([]byte, []int) {
	return file_api_new_world_api_v1_fish_proto_rawDescGZIP(), []int{12}
}

type FishPoolRankRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int32           `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int32           `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	RankType v1.PoolRankType `protobuf:"varint,3,opt,name=rank_type,json=rankType,proto3,enum=shared.v1.PoolRankType" json:"rank_type,omitempty"`
}

func (x *FishPoolRankRequest) Reset() {
	*x = FishPoolRankRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_new_world_api_v1_fish_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FishPoolRankRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FishPoolRankRequest) ProtoMessage() {}

func (x *FishPoolRankRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_new_world_api_v1_fish_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FishPoolRankRequest.ProtoReflect.Descriptor instead.
func (*FishPoolRankRequest) Descriptor() ([]byte, []int) {
	return file_api_new_world_api_v1_fish_proto_rawDescGZIP(), []int{13}
}

func (x *FishPoolRankRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FishPoolRankRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *FishPoolRankRequest) GetRankType() v1.PoolRankType {
	if x != nil {
		return x.RankType
	}
	return v1.PoolRankType(0)
}

type FishPullResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*FishPullResult_FishPull `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	TsMs int64                      `protobuf:"varint,2,opt,name=ts_ms,json=tsMs,proto3" json:"ts_ms,omitempty"`
}

func (x *FishPullResult) Reset() {
	*x = FishPullResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_new_world_api_v1_fish_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FishPullResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FishPullResult) ProtoMessage() {}

func (x *FishPullResult) ProtoReflect() protoreflect.Message {
	mi := &file_api_new_world_api_v1_fish_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FishPullResult.ProtoReflect.Descriptor instead.
func (*FishPullResult) Descriptor() ([]byte, []int) {
	return file_api_new_world_api_v1_fish_proto_rawDescGZIP(), []int{14}
}

func (x *FishPullResult) GetList() []*FishPullResult_FishPull {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *FishPullResult) GetTsMs() int64 {
	if x != nil {
		return x.TsMs
	}
	return 0
}

type FishListResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*v1.FishDetail `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *FishListResult) Reset() {
	*x = FishListResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_new_world_api_v1_fish_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FishListResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FishListResult) ProtoMessage() {}

func (x *FishListResult) ProtoReflect() protoreflect.Message {
	mi := &file_api_new_world_api_v1_fish_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FishListResult.ProtoReflect.Descriptor instead.
func (*FishListResult) Descriptor() ([]byte, []int) {
	return file_api_new_world_api_v1_fish_proto_rawDescGZIP(), []int{15}
}

func (x *FishListResult) GetList() []*v1.FishDetail {
	if x != nil {
		return x.List
	}
	return nil
}

type FishRefiningResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FishName         string `protobuf:"bytes,1,opt,name=fish_name,json=fishName,proto3" json:"fish_name,omitempty"`
	FishIconSourceId int64  `protobuf:"varint,2,opt,name=fish_icon_source_id,json=fishIconSourceId,proto3" json:"fish_icon_source_id,omitempty"`
	PropId           int64  `protobuf:"varint,3,opt,name=prop_id,json=propId,proto3" json:"prop_id,omitempty"`
	PropType         int32  `protobuf:"varint,4,opt,name=prop_type,json=propType,proto3" json:"prop_type,omitempty"`
	PropName         string `protobuf:"bytes,5,opt,name=prop_name,json=propName,proto3" json:"prop_name,omitempty"`
	PropRemark       string `protobuf:"bytes,6,opt,name=prop_remark,json=propRemark,proto3" json:"prop_remark,omitempty"`
	Experience       int32  `protobuf:"varint,7,opt,name=experience,proto3" json:"experience,omitempty"`
}

func (x *FishRefiningResult) Reset() {
	*x = FishRefiningResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_new_world_api_v1_fish_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FishRefiningResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FishRefiningResult) ProtoMessage() {}

func (x *FishRefiningResult) ProtoReflect() protoreflect.Message {
	mi := &file_api_new_world_api_v1_fish_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FishRefiningResult.ProtoReflect.Descriptor instead.
func (*FishRefiningResult) Descriptor() ([]byte, []int) {
	return file_api_new_world_api_v1_fish_proto_rawDescGZIP(), []int{16}
}

func (x *FishRefiningResult) GetFishName() string {
	if x != nil {
		return x.FishName
	}
	return ""
}

func (x *FishRefiningResult) GetFishIconSourceId() int64 {
	if x != nil {
		return x.FishIconSourceId
	}
	return 0
}

func (x *FishRefiningResult) GetPropId() int64 {
	if x != nil {
		return x.PropId
	}
	return 0
}

func (x *FishRefiningResult) GetPropType() int32 {
	if x != nil {
		return x.PropType
	}
	return 0
}

func (x *FishRefiningResult) GetPropName() string {
	if x != nil {
		return x.PropName
	}
	return ""
}

func (x *FishRefiningResult) GetPropRemark() string {
	if x != nil {
		return x.PropRemark
	}
	return ""
}

func (x *FishRefiningResult) GetExperience() int32 {
	if x != nil {
		return x.Experience
	}
	return 0
}

type FishPoolRankResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List           []*FishPoolRankResult_PoolRank   `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	MyFishRankList []*FishPoolRankResult_MyFishRank `protobuf:"bytes,2,rep,name=myFishRankList,proto3" json:"myFishRankList,omitempty"`
	CurrentPage    int32                            `protobuf:"varint,3,opt,name=current_page,json=currentPage,proto3" json:"current_page,omitempty"`
	PageSize       int32                            `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	TotalPage      int32                            `protobuf:"varint,5,opt,name=total_page,json=totalPage,proto3" json:"total_page,omitempty"`
}

func (x *FishPoolRankResult) Reset() {
	*x = FishPoolRankResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_new_world_api_v1_fish_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FishPoolRankResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FishPoolRankResult) ProtoMessage() {}

func (x *FishPoolRankResult) ProtoReflect() protoreflect.Message {
	mi := &file_api_new_world_api_v1_fish_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FishPoolRankResult.ProtoReflect.Descriptor instead.
func (*FishPoolRankResult) Descriptor() ([]byte, []int) {
	return file_api_new_world_api_v1_fish_proto_rawDescGZIP(), []int{17}
}

func (x *FishPoolRankResult) GetList() []*FishPoolRankResult_PoolRank {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *FishPoolRankResult) GetMyFishRankList() []*FishPoolRankResult_MyFishRank {
	if x != nil {
		return x.MyFishRankList
	}
	return nil
}

func (x *FishPoolRankResult) GetCurrentPage() int32 {
	if x != nil {
		return x.CurrentPage
	}
	return 0
}

func (x *FishPoolRankResult) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *FishPoolRankResult) GetTotalPage() int32 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

type ParkingListResult_ParkingDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parking string                `protobuf:"bytes,1,opt,name=parking,proto3" json:"parking,omitempty"`
	Status  *v1.FishParkingStatus `protobuf:"varint,2,opt,name=status,proto3,enum=shared.v1.FishParkingStatus,oneof" json:"status,omitempty"`
}

func (x *ParkingListResult_ParkingDetail) Reset() {
	*x = ParkingListResult_ParkingDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_new_world_api_v1_fish_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParkingListResult_ParkingDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParkingListResult_ParkingDetail) ProtoMessage() {}

func (x *ParkingListResult_ParkingDetail) ProtoReflect() protoreflect.Message {
	mi := &file_api_new_world_api_v1_fish_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParkingListResult_ParkingDetail.ProtoReflect.Descriptor instead.
func (*ParkingListResult_ParkingDetail) Descriptor() ([]byte, []int) {
	return file_api_new_world_api_v1_fish_proto_rawDescGZIP(), []int{6, 0}
}

func (x *ParkingListResult_ParkingDetail) GetParking() string {
	if x != nil {
		return x.Parking
	}
	return ""
}

func (x *ParkingListResult_ParkingDetail) GetStatus() v1.FishParkingStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return v1.FishParkingStatus(0)
}

type FishPullResult_FishPull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Weight         int64              `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	MaxHeal        int64              `protobuf:"varint,3,opt,name=max_heal,json=maxHeal,proto3" json:"max_heal,omitempty"`
	Heal           int64              `protobuf:"varint,4,opt,name=heal,proto3" json:"heal,omitempty"`
	RecoverSpeed   int64              `protobuf:"varint,5,opt,name=recover_speed,json=recoverSpeed,proto3" json:"recover_speed,omitempty"`
	Atk            int64              `protobuf:"varint,6,opt,name=atk,proto3" json:"atk,omitempty"`
	Def            int64              `protobuf:"varint,7,opt,name=def,proto3" json:"def,omitempty"`
	EarnSpeed      int64              `protobuf:"varint,8,opt,name=earn_speed,json=earnSpeed,proto3" json:"earn_speed,omitempty"`
	Dodge          int32              `protobuf:"varint,9,opt,name=dodge,proto3" json:"dodge,omitempty"`
	Money          *int64             `protobuf:"varint,10,opt,name=money,proto3,oneof" json:"money,omitempty"`
	ProtectCount   *int32             `protobuf:"varint,11,opt,name=protect_count,json=protectCount,proto3,oneof" json:"protect_count,omitempty"`
	FishSkills     []*v1.FishSkill    `protobuf:"bytes,12,rep,name=fish_skills,json=fishSkills,proto3" json:"fish_skills,omitempty"`
	AwakingRemain  *int32             `protobuf:"varint,13,opt,name=awaking_remain,json=awakingRemain,proto3,oneof" json:"awaking_remain,omitempty"`
	FishStatistics *v1.FishStatistics `protobuf:"bytes,14,opt,name=fish_statistics,json=fishStatistics,proto3" json:"fish_statistics,omitempty"`
	Level          int32              `protobuf:"varint,15,opt,name=level,proto3" json:"level,omitempty"`
	Effects        []*v1.FishEffect   `protobuf:"bytes,16,rep,name=effects,proto3" json:"effects,omitempty"`
	Godhead        []*v1.FishGodhead  `protobuf:"bytes,17,rep,name=godhead,proto3" json:"godhead,omitempty"`
}

func (x *FishPullResult_FishPull) Reset() {
	*x = FishPullResult_FishPull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_new_world_api_v1_fish_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FishPullResult_FishPull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FishPullResult_FishPull) ProtoMessage() {}

func (x *FishPullResult_FishPull) ProtoReflect() protoreflect.Message {
	mi := &file_api_new_world_api_v1_fish_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FishPullResult_FishPull.ProtoReflect.Descriptor instead.
func (*FishPullResult_FishPull) Descriptor() ([]byte, []int) {
	return file_api_new_world_api_v1_fish_proto_rawDescGZIP(), []int{14, 0}
}

func (x *FishPullResult_FishPull) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FishPullResult_FishPull) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *FishPullResult_FishPull) GetMaxHeal() int64 {
	if x != nil {
		return x.MaxHeal
	}
	return 0
}

func (x *FishPullResult_FishPull) GetHeal() int64 {
	if x != nil {
		return x.Heal
	}
	return 0
}

func (x *FishPullResult_FishPull) GetRecoverSpeed() int64 {
	if x != nil {
		return x.RecoverSpeed
	}
	return 0
}

func (x *FishPullResult_FishPull) GetAtk() int64 {
	if x != nil {
		return x.Atk
	}
	return 0
}

func (x *FishPullResult_FishPull) GetDef() int64 {
	if x != nil {
		return x.Def
	}
	return 0
}

func (x *FishPullResult_FishPull) GetEarnSpeed() int64 {
	if x != nil {
		return x.EarnSpeed
	}
	return 0
}

func (x *FishPullResult_FishPull) GetDodge() int32 {
	if x != nil {
		return x.Dodge
	}
	return 0
}

func (x *FishPullResult_FishPull) GetMoney() int64 {
	if x != nil && x.Money != nil {
		return *x.Money
	}
	return 0
}

func (x *FishPullResult_FishPull) GetProtectCount() int32 {
	if x != nil && x.ProtectCount != nil {
		return *x.ProtectCount
	}
	return 0
}

func (x *FishPullResult_FishPull) GetFishSkills() []*v1.FishSkill {
	if x != nil {
		return x.FishSkills
	}
	return nil
}

func (x *FishPullResult_FishPull) GetAwakingRemain() int32 {
	if x != nil && x.AwakingRemain != nil {
		return *x.AwakingRemain
	}
	return 0
}

func (x *FishPullResult_FishPull) GetFishStatistics() *v1.FishStatistics {
	if x != nil {
		return x.FishStatistics
	}
	return nil
}

func (x *FishPullResult_FishPull) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *FishPullResult_FishPull) GetEffects() []*v1.FishEffect {
	if x != nil {
		return x.Effects
	}
	return nil
}

func (x *FishPullResult_FishPull) GetGodhead() []*v1.FishGodhead {
	if x != nil {
		return x.Godhead
	}
	return nil
}

type FishPoolRankResult_MyFishRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FishId           string `protobuf:"bytes,1,opt,name=fish_id,json=fishId,proto3" json:"fish_id,omitempty"`
	FishName         string `protobuf:"bytes,2,opt,name=fish_name,json=fishName,proto3" json:"fish_name,omitempty"`
	FishIconSourceId int64  `protobuf:"varint,3,opt,name=fish_icon_source_id,json=fishIconSourceId,proto3" json:"fish_icon_source_id,omitempty"`
	Rank             int32  `protobuf:"varint,4,opt,name=rank,proto3" json:"rank,omitempty"`
}

func (x *FishPoolRankResult_MyFishRank) Reset() {
	*x = FishPoolRankResult_MyFishRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_new_world_api_v1_fish_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FishPoolRankResult_MyFishRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FishPoolRankResult_MyFishRank) ProtoMessage() {}

func (x *FishPoolRankResult_MyFishRank) ProtoReflect() protoreflect.Message {
	mi := &file_api_new_world_api_v1_fish_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FishPoolRankResult_MyFishRank.ProtoReflect.Descriptor instead.
func (*FishPoolRankResult_MyFishRank) Descriptor() ([]byte, []int) {
	return file_api_new_world_api_v1_fish_proto_rawDescGZIP(), []int{17, 0}
}

func (x *FishPoolRankResult_MyFishRank) GetFishId() string {
	if x != nil {
		return x.FishId
	}
	return ""
}

func (x *FishPoolRankResult_MyFishRank) GetFishName() string {
	if x != nil {
		return x.FishName
	}
	return ""
}

func (x *FishPoolRankResult_MyFishRank) GetFishIconSourceId() int64 {
	if x != nil {
		return x.FishIconSourceId
	}
	return 0
}

func (x *FishPoolRankResult_MyFishRank) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

type FishPoolRankResult_PoolRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FishId      string         `protobuf:"bytes,1,opt,name=fish_id,json=fishId,proto3" json:"fish_id,omitempty"`
	Weight      int64          `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	MasterUid   int64          `protobuf:"varint,3,opt,name=master_uid,json=masterUid,proto3" json:"master_uid,omitempty"`
	MasterName  string         `protobuf:"bytes,4,opt,name=master_name,json=masterName,proto3" json:"master_name,omitempty"`
	AliveTimeMs int64          `protobuf:"varint,5,opt,name=alive_time_ms,json=aliveTimeMs,proto3" json:"alive_time_ms,omitempty"`
	Rank        int32          `protobuf:"varint,6,opt,name=rank,proto3" json:"rank,omitempty"`
	Fish        *v1.FishDetail `protobuf:"bytes,7,opt,name=fish,proto3" json:"fish,omitempty"`
}

func (x *FishPoolRankResult_PoolRank) Reset() {
	*x = FishPoolRankResult_PoolRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_new_world_api_v1_fish_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FishPoolRankResult_PoolRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FishPoolRankResult_PoolRank) ProtoMessage() {}

func (x *FishPoolRankResult_PoolRank) ProtoReflect() protoreflect.Message {
	mi := &file_api_new_world_api_v1_fish_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FishPoolRankResult_PoolRank.ProtoReflect.Descriptor instead.
func (*FishPoolRankResult_PoolRank) Descriptor() ([]byte, []int) {
	return file_api_new_world_api_v1_fish_proto_rawDescGZIP(), []int{17, 1}
}

func (x *FishPoolRankResult_PoolRank) GetFishId() string {
	if x != nil {
		return x.FishId
	}
	return ""
}

func (x *FishPoolRankResult_PoolRank) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *FishPoolRankResult_PoolRank) GetMasterUid() int64 {
	if x != nil {
		return x.MasterUid
	}
	return 0
}

func (x *FishPoolRankResult_PoolRank) GetMasterName() string {
	if x != nil {
		return x.MasterName
	}
	return ""
}

func (x *FishPoolRankResult_PoolRank) GetAliveTimeMs() int64 {
	if x != nil {
		return x.AliveTimeMs
	}
	return 0
}

func (x *FishPoolRankResult_PoolRank) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *FishPoolRankResult_PoolRank) GetFish() *v1.FishDetail {
	if x != nil {
		return x.Fish
	}
	return nil
}

var File_api_new_world_api_v1_fish_proto protoreflect.FileDescriptor

var file_api_new_world_api_v1_fish_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x77, 0x2d, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2d,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x09, 0x62,
	0x69, 0x7a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x53, 0x0a, 0x19, 0x44, 0x69, 0x76, 0x65,
	0x73, 0x74, 0x69, 0x74, 0x75, 0x72, 0x65, 0x47, 0x6f, 0x64, 0x68, 0x65, 0x61, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x73, 0x68, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x73, 0x68, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x67, 0x6f, 0x64, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x67, 0x6f, 0x64, 0x68, 0x65, 0x61, 0x64, 0x49, 0x64, 0x22, 0xa4, 0x01,
	0x0a, 0x18, 0x44, 0x69, 0x76, 0x65, 0x73, 0x74, 0x69, 0x74, 0x75, 0x72, 0x65, 0x47, 0x6f, 0x64,
	0x68, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x6f,
	0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x22, 0x11, 0x0a, 0x0f, 0x46, 0x69, 0x73, 0x68, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x11, 0x0a, 0x0f, 0x46, 0x69, 0x73, 0x68, 0x50,
	0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2e, 0x0a, 0x13, 0x46, 0x69,
	0x73, 0x68, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x73, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x73, 0x68, 0x49, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x50, 0x61,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0xd6, 0x01, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x50, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e,
	0x65, 0x77, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x50, 0x61,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0b, 0x70, 0x61, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x6f, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x73, 0x68, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x13, 0x0a, 0x11, 0x46, 0x69, 0x73,
	0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xdc,
	0x07, 0x0a, 0x10, 0x46, 0x69, 0x73, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x29, 0x0a, 0x0e, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x0c, 0x69, 0x63, 0x6f,
	0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6d, 0x61, 0x78,
	0x5f, 0x68, 0x65, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x07, 0x6d,
	0x61, 0x78, 0x48, 0x65, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x68, 0x65, 0x61,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x04, 0x68, 0x65, 0x61, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x06, 0x52, 0x0c, 0x72, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03,
	0x61, 0x74, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x48, 0x07, 0x52, 0x03, 0x61, 0x74, 0x6b,
	0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x64, 0x65, 0x66, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x08, 0x52, 0x03, 0x64, 0x65, 0x66, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x65, 0x61,
	0x72, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x48, 0x09,
	0x52, 0x09, 0x65, 0x61, 0x72, 0x6e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x64, 0x6f, 0x64, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52,
	0x05, 0x64, 0x6f, 0x64, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6d, 0x6f, 0x6e,
	0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0b, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x0c, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x0d, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x07, 0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0f, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x61, 0x77, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x10, 0x52, 0x0d, 0x61, 0x77, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x11, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x12, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0f,
	0x66, 0x69, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x69, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x52, 0x0e, 0x66, 0x69, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x68, 0x65, 0x61, 0x6c, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x61, 0x74, 0x6b, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x64, 0x65, 0x66, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x5f,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x64, 0x6f, 0x64, 0x67, 0x65, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x61, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x77, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x2b, 0x0a,
	0x10, 0x46, 0x69, 0x73, 0x68, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x73, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x66, 0x69, 0x73, 0x68, 0x49, 0x64, 0x22, 0x11, 0x0a, 0x0f, 0x46, 0x69,
	0x73, 0x68, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x2b, 0x0a,
	0x10, 0x46, 0x69, 0x73, 0x68, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x73, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x73, 0x68, 0x49, 0x64, 0x22, 0x11, 0x0a, 0x0f, 0x46, 0x69,
	0x73, 0x68, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x7c, 0x0a,
	0x13, 0x46, 0x69, 0x73, 0x68, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0xd6, 0x05, 0x0a, 0x0e,
	0x46, 0x69, 0x73, 0x68, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x39,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e,
	0x65, 0x77, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x73, 0x68,
	0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x46, 0x69, 0x73, 0x68, 0x50,
	0x75, 0x6c, 0x6c, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x73, 0x5f,
	0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x73, 0x4d, 0x73, 0x1a, 0xf3,
	0x04, 0x0a, 0x08, 0x46, 0x69, 0x73, 0x68, 0x50, 0x75, 0x6c, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x48, 0x65, 0x61, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x65, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x65,
	0x61, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x74, 0x6b, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x61, 0x74, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x66,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x64, 0x65, 0x66, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x61, 0x72, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x65, 0x61, 0x72, 0x6e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f,
	0x64, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x6f, 0x64, 0x67, 0x65,
	0x12, 0x19, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x00, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x70,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x0b, 0x66, 0x69, 0x73, 0x68, 0x5f, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x73, 0x68, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x52, 0x0a, 0x66, 0x69, 0x73, 0x68, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x2a, 0x0a, 0x0e,
	0x61, 0x77, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0d, 0x61, 0x77, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0f, 0x66, 0x69, 0x73, 0x68,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69,
	0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0e, 0x66, 0x69,
	0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x73, 0x68, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x07, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x07, 0x67, 0x6f, 0x64, 0x68, 0x65, 0x61, 0x64, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x73, 0x68, 0x47, 0x6f, 0x64, 0x68, 0x65, 0x61, 0x64, 0x52, 0x07, 0x67, 0x6f,
	0x64, 0x68, 0x65, 0x61, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x77, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x22, 0x3b, 0x0a, 0x0e, 0x46, 0x69, 0x73, 0x68, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x73, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0xf4, 0x01, 0x0a, 0x12, 0x46, 0x69, 0x73, 0x68, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x73, 0x68,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x73,
	0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x66, 0x69, 0x73, 0x68, 0x5f, 0x69, 0x63,
	0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x66, 0x69, 0x73, 0x68, 0x49, 0x63, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x5f,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x70, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xf0, 0x04, 0x0a, 0x12, 0x46, 0x69, 0x73,
	0x68, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x3d, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x6e, 0x65, 0x77, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x73,
	0x68, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e,
	0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x53,
	0x0a, 0x0e, 0x6d, 0x79, 0x46, 0x69, 0x73, 0x68, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x77, 0x6f, 0x72,
	0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x73, 0x68, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x61,
	0x6e, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x4d, 0x79, 0x46, 0x69, 0x73, 0x68, 0x52,
	0x61, 0x6e, 0x6b, 0x52, 0x0e, 0x6d, 0x79, 0x46, 0x69, 0x73, 0x68, 0x52, 0x61, 0x6e, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61,
	0x67, 0x65, 0x1a, 0x85, 0x01, 0x0a, 0x0a, 0x4d, 0x79, 0x46, 0x69, 0x73, 0x68, 0x52, 0x61, 0x6e,
	0x6b, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x73, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x73, 0x68, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69,
	0x73, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x66, 0x69, 0x73, 0x68, 0x5f,
	0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x66, 0x69, 0x73, 0x68, 0x49, 0x63, 0x6f, 0x6e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x1a, 0xde, 0x01, 0x0a, 0x08, 0x50,
	0x6f, 0x6f, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x73, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x73, 0x68, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x6c, 0x69, 0x76,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x61, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b,
	0x12, 0x29, 0x0a, 0x04, 0x66, 0x69, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x73, 0x68, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x66, 0x69, 0x73, 0x68, 0x2a, 0x33, 0x0a, 0x07, 0x50,
	0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x05, 0x0a, 0x01, 0x51, 0x10, 0x00, 0x12, 0x05, 0x0a,
	0x01, 0x57, 0x10, 0x01, 0x12, 0x05, 0x0a, 0x01, 0x45, 0x10, 0x02, 0x12, 0x05, 0x0a, 0x01, 0x52,
	0x10, 0x03, 0x12, 0x05, 0x0a, 0x01, 0x41, 0x10, 0x04, 0x12, 0x05, 0x0a, 0x01, 0x46, 0x10, 0x05,
	0x32, 0xf9, 0x07, 0x0a, 0x04, 0x46, 0x69, 0x73, 0x68, 0x12, 0x61, 0x0a, 0x04, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1d, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x1c,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x66, 0x69, 0x73, 0x68, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x92, 0x01, 0x0a,
	0x12, 0x44, 0x69, 0x76, 0x65, 0x73, 0x74, 0x69, 0x74, 0x75, 0x72, 0x65, 0x47, 0x6f, 0x64, 0x68,
	0x65, 0x61, 0x64, 0x12, 0x27, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x69, 0x76, 0x65, 0x73, 0x74, 0x69, 0x74, 0x75, 0x72, 0x65, 0x47, 0x6f,
	0x64, 0x68, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6e,
	0x65, 0x77, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x76, 0x65,
	0x73, 0x74, 0x69, 0x74, 0x75, 0x72, 0x65, 0x47, 0x6f, 0x64, 0x68, 0x65, 0x61, 0x64, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22, 0x20, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x73, 0x68, 0x2f, 0x67, 0x6f, 0x64, 0x68, 0x65,
	0x61, 0x64, 0x2f, 0x64, 0x69, 0x76, 0x65, 0x73, 0x74, 0x69, 0x74, 0x75, 0x72, 0x65, 0x3a, 0x01,
	0x2a, 0x12, 0x71, 0x0a, 0x08, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x2e,
	0x6e, 0x65, 0x77, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x73,
	0x68, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x73, 0x68, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x73, 0x68, 0x2f, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x3a, 0x01, 0x2a, 0x12, 0x69, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1f,
	0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69,
	0x73, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x69, 0x73, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x66, 0x69, 0x73, 0x68, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12,
	0x72, 0x0a, 0x08, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x21, 0x2e, 0x6e, 0x65,
	0x77, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x73, 0x68, 0x50,
	0x6f, 0x6f, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69,
	0x73, 0x68, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x66, 0x69, 0x73, 0x68, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x72, 0x61, 0x6e, 0x6b,
	0x3a, 0x01, 0x2a, 0x12, 0x65, 0x0a, 0x05, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x12, 0x1e, 0x2e, 0x6e,
	0x65, 0x77, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x73, 0x68,
	0x53, 0x6c, 0x65, 0x65, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6e,
	0x65, 0x77, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x73, 0x68,
	0x53, 0x6c, 0x65, 0x65, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x1d, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x73,
	0x68, 0x2f, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x3a, 0x01, 0x2a, 0x12, 0x65, 0x0a, 0x05, 0x41, 0x6c,
	0x69, 0x76, 0x65, 0x12, 0x1e, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x73, 0x68, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x73, 0x68, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x73, 0x68, 0x2f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x3a, 0x01,
	0x2a, 0x12, 0x61, 0x0a, 0x04, 0x50, 0x75, 0x6c, 0x6c, 0x12, 0x1d, 0x2e, 0x6e, 0x65, 0x77, 0x5f,
	0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x73, 0x68, 0x50, 0x75, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x73, 0x68, 0x50, 0x75, 0x6c, 0x6c,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x11,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x73, 0x68, 0x2f, 0x70, 0x75, 0x6c,
	0x6c, 0x3a, 0x01, 0x2a, 0x12, 0x76, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x77, 0x6f, 0x72, 0x6c,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x73, 0x68, 0x2f, 0x70, 0x61, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x01, 0x2a, 0x42, 0x56, 0x0a, 0x19,
	0x63, 0x6f, 0x6d, 0x2e, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x42, 0x0b, 0x46, 0x69, 0x73, 0x68, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x56, 0x31, 0x50, 0x01, 0x5a, 0x2a, 0x6e, 0x65, 0x77, 0x2d, 0x77, 0x6f,
	0x72, 0x6c, 0x64, 0x2d, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65,
	0x77, 0x2d, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x3b, 0x61,
	0x70, 0x69, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_new_world_api_v1_fish_proto_rawDescOnce sync.Once
	file_api_new_world_api_v1_fish_proto_rawDescData = file_api_new_world_api_v1_fish_proto_rawDesc
)

func file_api_new_world_api_v1_fish_proto_rawDescGZIP() []byte {
	file_api_new_world_api_v1_fish_proto_rawDescOnce.Do(func() {
		file_api_new_world_api_v1_fish_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_new_world_api_v1_fish_proto_rawDescData)
	})
	return file_api_new_world_api_v1_fish_proto_rawDescData
}

var file_api_new_world_api_v1_fish_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_new_world_api_v1_fish_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_api_new_world_api_v1_fish_proto_goTypes = []interface{}{
	(Parking)(0),                            // 0: new_world.v1.Parking
	(*DivestitureGodheadRequest)(nil),       // 1: new_world.v1.DivestitureGodheadRequest
	(*DivestitureGodheadResult)(nil),        // 2: new_world.v1.DivestitureGodheadResult
	(*FishListRequest)(nil),                 // 3: new_world.v1.FishListRequest
	(*FishPullRequest)(nil),                 // 4: new_world.v1.FishPullRequest
	(*FishRefiningRequest)(nil),             // 5: new_world.v1.FishRefiningRequest
	(*ParkingListRequest)(nil),              // 6: new_world.v1.ParkingListRequest
	(*ParkingListResult)(nil),               // 7: new_world.v1.ParkingListResult
	(*FishCreateRequest)(nil),               // 8: new_world.v1.FishCreateRequest
	(*FishCreateResult)(nil),                // 9: new_world.v1.FishCreateResult
	(*FishSleepRequest)(nil),                // 10: new_world.v1.FishSleepRequest
	(*FishSleepResult)(nil),                 // 11: new_world.v1.FishSleepResult
	(*FishAliveRequest)(nil),                // 12: new_world.v1.FishAliveRequest
	(*FishAliveResult)(nil),                 // 13: new_world.v1.FishAliveResult
	(*FishPoolRankRequest)(nil),             // 14: new_world.v1.FishPoolRankRequest
	(*FishPullResult)(nil),                  // 15: new_world.v1.FishPullResult
	(*FishListResult)(nil),                  // 16: new_world.v1.FishListResult
	(*FishRefiningResult)(nil),              // 17: new_world.v1.FishRefiningResult
	(*FishPoolRankResult)(nil),              // 18: new_world.v1.FishPoolRankResult
	(*ParkingListResult_ParkingDetail)(nil), // 19: new_world.v1.ParkingListResult.ParkingDetail
	(*FishPullResult_FishPull)(nil),         // 20: new_world.v1.FishPullResult.FishPull
	(*FishPoolRankResult_MyFishRank)(nil),   // 21: new_world.v1.FishPoolRankResult.MyFishRank
	(*FishPoolRankResult_PoolRank)(nil),     // 22: new_world.v1.FishPoolRankResult.PoolRank
	(v1.FishStatus)(0),                      // 23: shared.v1.FishStatus
	(*v1.FishStatistics)(nil),               // 24: shared.v1.FishStatistics
	(v1.PoolRankType)(0),                    // 25: shared.v1.PoolRankType
	(*v1.FishDetail)(nil),                   // 26: shared.v1.FishDetail
	(v1.FishParkingStatus)(0),               // 27: shared.v1.FishParkingStatus
	(*v1.FishSkill)(nil),                    // 28: shared.v1.FishSkill
	(*v1.FishEffect)(nil),                   // 29: shared.v1.FishEffect
	(*v1.FishGodhead)(nil),                  // 30: shared.v1.FishGodhead
}
var file_api_new_world_api_v1_fish_proto_depIdxs = []int32{
	19, // 0: new_world.v1.ParkingListResult.parking_list:type_name -> new_world.v1.ParkingListResult.ParkingDetail
	23, // 1: new_world.v1.FishCreateResult.status:type_name -> shared.v1.FishStatus
	24, // 2: new_world.v1.FishCreateResult.fish_statistics:type_name -> shared.v1.FishStatistics
	25, // 3: new_world.v1.FishPoolRankRequest.rank_type:type_name -> shared.v1.PoolRankType
	20, // 4: new_world.v1.FishPullResult.list:type_name -> new_world.v1.FishPullResult.FishPull
	26, // 5: new_world.v1.FishListResult.list:type_name -> shared.v1.FishDetail
	22, // 6: new_world.v1.FishPoolRankResult.list:type_name -> new_world.v1.FishPoolRankResult.PoolRank
	21, // 7: new_world.v1.FishPoolRankResult.myFishRankList:type_name -> new_world.v1.FishPoolRankResult.MyFishRank
	27, // 8: new_world.v1.ParkingListResult.ParkingDetail.status:type_name -> shared.v1.FishParkingStatus
	28, // 9: new_world.v1.FishPullResult.FishPull.fish_skills:type_name -> shared.v1.FishSkill
	24, // 10: new_world.v1.FishPullResult.FishPull.fish_statistics:type_name -> shared.v1.FishStatistics
	29, // 11: new_world.v1.FishPullResult.FishPull.effects:type_name -> shared.v1.FishEffect
	30, // 12: new_world.v1.FishPullResult.FishPull.godhead:type_name -> shared.v1.FishGodhead
	26, // 13: new_world.v1.FishPoolRankResult.PoolRank.fish:type_name -> shared.v1.FishDetail
	3,  // 14: new_world.v1.Fish.List:input_type -> new_world.v1.FishListRequest
	1,  // 15: new_world.v1.Fish.DivestitureGodhead:input_type -> new_world.v1.DivestitureGodheadRequest
	5,  // 16: new_world.v1.Fish.Refining:input_type -> new_world.v1.FishRefiningRequest
	8,  // 17: new_world.v1.Fish.Create:input_type -> new_world.v1.FishCreateRequest
	14, // 18: new_world.v1.Fish.PoolRank:input_type -> new_world.v1.FishPoolRankRequest
	10, // 19: new_world.v1.Fish.Sleep:input_type -> new_world.v1.FishSleepRequest
	12, // 20: new_world.v1.Fish.Alive:input_type -> new_world.v1.FishAliveRequest
	4,  // 21: new_world.v1.Fish.Pull:input_type -> new_world.v1.FishPullRequest
	6,  // 22: new_world.v1.Fish.ParkingList:input_type -> new_world.v1.ParkingListRequest
	16, // 23: new_world.v1.Fish.List:output_type -> new_world.v1.FishListResult
	2,  // 24: new_world.v1.Fish.DivestitureGodhead:output_type -> new_world.v1.DivestitureGodheadResult
	17, // 25: new_world.v1.Fish.Refining:output_type -> new_world.v1.FishRefiningResult
	9,  // 26: new_world.v1.Fish.Create:output_type -> new_world.v1.FishCreateResult
	18, // 27: new_world.v1.Fish.PoolRank:output_type -> new_world.v1.FishPoolRankResult
	11, // 28: new_world.v1.Fish.Sleep:output_type -> new_world.v1.FishSleepResult
	13, // 29: new_world.v1.Fish.Alive:output_type -> new_world.v1.FishAliveResult
	15, // 30: new_world.v1.Fish.Pull:output_type -> new_world.v1.FishPullResult
	7,  // 31: new_world.v1.Fish.ParkingList:output_type -> new_world.v1.ParkingListResult
	23, // [23:32] is the sub-list for method output_type
	14, // [14:23] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_api_new_world_api_v1_fish_proto_init() }
func file_api_new_world_api_v1_fish_proto_init() {
	if File_api_new_world_api_v1_fish_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_new_world_api_v1_fish_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DivestitureGodheadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_new_world_api_v1_fish_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DivestitureGodheadResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_new_world_api_v1_fish_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FishListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_new_world_api_v1_fish_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FishPullRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_new_world_api_v1_fish_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FishRefiningRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_new_world_api_v1_fish_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParkingListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_new_world_api_v1_fish_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParkingListResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_new_world_api_v1_fish_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FishCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_new_world_api_v1_fish_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FishCreateResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_new_world_api_v1_fish_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FishSleepRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_new_world_api_v1_fish_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FishSleepResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_new_world_api_v1_fish_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FishAliveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_new_world_api_v1_fish_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FishAliveResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_new_world_api_v1_fish_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FishPoolRankRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_new_world_api_v1_fish_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FishPullResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_new_world_api_v1_fish_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FishListResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_new_world_api_v1_fish_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FishRefiningResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_new_world_api_v1_fish_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FishPoolRankResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_new_world_api_v1_fish_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParkingListResult_ParkingDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_new_world_api_v1_fish_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FishPullResult_FishPull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_new_world_api_v1_fish_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FishPoolRankResult_MyFishRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_new_world_api_v1_fish_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FishPoolRankResult_PoolRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_new_world_api_v1_fish_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_api_new_world_api_v1_fish_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_api_new_world_api_v1_fish_proto_msgTypes[19].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_new_world_api_v1_fish_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_new_world_api_v1_fish_proto_goTypes,
		DependencyIndexes: file_api_new_world_api_v1_fish_proto_depIdxs,
		EnumInfos:         file_api_new_world_api_v1_fish_proto_enumTypes,
		MessageInfos:      file_api_new_world_api_v1_fish_proto_msgTypes,
	}.Build()
	File_api_new_world_api_v1_fish_proto = out.File
	file_api_new_world_api_v1_fish_proto_rawDesc = nil
	file_api_new_world_api_v1_fish_proto_goTypes = nil
	file_api_new_world_api_v1_fish_proto_depIdxs = nil
}
