// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: api/shared/v1/biz.proto

package sharedpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PoolRankType int32

const (
	PoolRankType_weight_rank PoolRankType = 0
	PoolRankType_kills_rank  PoolRankType = 1
)

// Enum value maps for PoolRankType.
var (
	PoolRankType_name = map[int32]string{
		0: "weight_rank",
		1: "kills_rank",
	}
	PoolRankType_value = map[string]int32{
		"weight_rank": 0,
		"kills_rank":  1,
	}
)

func (x PoolRankType) Enum() *PoolRankType {
	p := new(PoolRankType)
	*p = x
	return p
}

func (x PoolRankType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PoolRankType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_shared_v1_biz_proto_enumTypes[0].Descriptor()
}

func (PoolRankType) Type() protoreflect.EnumType {
	return &file_api_shared_v1_biz_proto_enumTypes[0]
}

func (x PoolRankType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PoolRankType.Descriptor instead.
func (PoolRankType) EnumDescriptor() ([]byte, []int) {
	return file_api_shared_v1_biz_proto_rawDescGZIP(), []int{0}
}

type FishStatus int32

const (
	FishStatus_alive   FishStatus = 0
	FishStatus_sleep   FishStatus = 1
	FishStatus_up_sell FishStatus = 2
	FishStatus_dead    FishStatus = 3
	FishStatus_refined FishStatus = 4
)

// Enum value maps for FishStatus.
var (
	FishStatus_name = map[int32]string{
		0: "alive",
		1: "sleep",
		2: "up_sell",
		3: "dead",
		4: "refined",
	}
	FishStatus_value = map[string]int32{
		"alive":   0,
		"sleep":   1,
		"up_sell": 2,
		"dead":    3,
		"refined": 4,
	}
)

func (x FishStatus) Enum() *FishStatus {
	p := new(FishStatus)
	*p = x
	return p
}

func (x FishStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FishStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_shared_v1_biz_proto_enumTypes[1].Descriptor()
}

func (FishStatus) Type() protoreflect.EnumType {
	return &file_api_shared_v1_biz_proto_enumTypes[1]
}

func (x FishStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FishStatus.Descriptor instead.
func (FishStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_shared_v1_biz_proto_rawDescGZIP(), []int{1}
}

type FishParkingStatus int32

const (
	FishParkingStatus_fish_parking_inactive FishParkingStatus = 0
	FishParkingStatus_fish_parking_unused   FishParkingStatus = 1
	FishParkingStatus_fish_parking_used     FishParkingStatus = 2
)

// Enum value maps for FishParkingStatus.
var (
	FishParkingStatus_name = map[int32]string{
		0: "fish_parking_inactive",
		1: "fish_parking_unused",
		2: "fish_parking_used",
	}
	FishParkingStatus_value = map[string]int32{
		"fish_parking_inactive": 0,
		"fish_parking_unused":   1,
		"fish_parking_used":     2,
	}
)

func (x FishParkingStatus) Enum() *FishParkingStatus {
	p := new(FishParkingStatus)
	*p = x
	return p
}

func (x FishParkingStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FishParkingStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_shared_v1_biz_proto_enumTypes[2].Descriptor()
}

func (FishParkingStatus) Type() protoreflect.EnumType {
	return &file_api_shared_v1_biz_proto_enumTypes[2]
}

func (x FishParkingStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FishParkingStatus.Descriptor instead.
func (FishParkingStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_shared_v1_biz_proto_rawDescGZIP(), []int{2}
}

type PoolRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FishId      string     `protobuf:"bytes,1,opt,name=fish_id,json=fishId,proto3" json:"fish_id,omitempty"`
	Weight      int64      `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	MasterUid   int64      `protobuf:"varint,3,opt,name=master_uid,json=masterUid,proto3" json:"master_uid,omitempty"`
	MasterName  string     `protobuf:"bytes,4,opt,name=master_name,json=masterName,proto3" json:"master_name,omitempty"`
	AliveTimeMs int64      `protobuf:"varint,5,opt,name=alive_time_ms,json=aliveTimeMs,proto3" json:"alive_time_ms,omitempty"`
	Rank        int32      `protobuf:"varint,6,opt,name=rank,proto3" json:"rank,omitempty"`
	Fish        *FreshFish `protobuf:"bytes,7,opt,name=fish,proto3" json:"fish,omitempty"`
}

func (x *PoolRank) Reset() {
	*x = PoolRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_shared_v1_biz_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolRank) ProtoMessage() {}

func (x *PoolRank) ProtoReflect() protoreflect.Message {
	mi := &file_api_shared_v1_biz_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolRank.ProtoReflect.Descriptor instead.
func (*PoolRank) Descriptor() ([]byte, []int) {
	return file_api_shared_v1_biz_proto_rawDescGZIP(), []int{0}
}

func (x *PoolRank) GetFishId() string {
	if x != nil {
		return x.FishId
	}
	return ""
}

func (x *PoolRank) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *PoolRank) GetMasterUid() int64 {
	if x != nil {
		return x.MasterUid
	}
	return 0
}

func (x *PoolRank) GetMasterName() string {
	if x != nil {
		return x.MasterName
	}
	return ""
}

func (x *PoolRank) GetAliveTimeMs() int64 {
	if x != nil {
		return x.AliveTimeMs
	}
	return 0
}

func (x *PoolRank) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *PoolRank) GetFish() *FreshFish {
	if x != nil {
		return x.Fish
	}
	return nil
}

type FishStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProactiveAttackCount *int32          `protobuf:"varint,1,opt,name=proactive_attack_count,json=proactiveAttackCount,proto3,oneof" json:"proactive_attack_count,omitempty"`
	CounterAttackCount   *int32          `protobuf:"varint,2,opt,name=counter_attack_count,json=counterAttackCount,proto3,oneof" json:"counter_attack_count,omitempty"`
	Kills                *int32          `protobuf:"varint,3,opt,name=kills,proto3,oneof" json:"kills,omitempty"`
	EarnDetail           map[int32]int64 `protobuf:"bytes,4,rep,name=earn_detail,json=earnDetail,proto3" json:"earn_detail,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	GrowthDetail         map[int32]int64 `protobuf:"bytes,5,rep,name=growth_detail,json=growthDetail,proto3" json:"growth_detail,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	GrowthCountDetail    map[int32]int32 `protobuf:"bytes,6,rep,name=growth_count_detail,json=growthCountDetail,proto3" json:"growth_count_detail,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *FishStatistics) Reset() {
	*x = FishStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_shared_v1_biz_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FishStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FishStatistics) ProtoMessage() {}

func (x *FishStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_api_shared_v1_biz_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FishStatistics.ProtoReflect.Descriptor instead.
func (*FishStatistics) Descriptor() ([]byte, []int) {
	return file_api_shared_v1_biz_proto_rawDescGZIP(), []int{1}
}

func (x *FishStatistics) GetProactiveAttackCount() int32 {
	if x != nil && x.ProactiveAttackCount != nil {
		return *x.ProactiveAttackCount
	}
	return 0
}

func (x *FishStatistics) GetCounterAttackCount() int32 {
	if x != nil && x.CounterAttackCount != nil {
		return *x.CounterAttackCount
	}
	return 0
}

func (x *FishStatistics) GetKills() int32 {
	if x != nil && x.Kills != nil {
		return *x.Kills
	}
	return 0
}

func (x *FishStatistics) GetEarnDetail() map[int32]int64 {
	if x != nil {
		return x.EarnDetail
	}
	return nil
}

func (x *FishStatistics) GetGrowthDetail() map[int32]int64 {
	if x != nil {
		return x.GrowthDetail
	}
	return nil
}

func (x *FishStatistics) GetGrowthCountDetail() map[int32]int32 {
	if x != nil {
		return x.GrowthCountDetail
	}
	return nil
}

type FishEffect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	EffectType     int32  `protobuf:"varint,2,opt,name=effect_type,json=effectType,proto3" json:"effect_type,omitempty"`
	EffectExpireMs int64  `protobuf:"varint,3,opt,name=effect_expire_ms,json=effectExpireMs,proto3" json:"effect_expire_ms,omitempty"`
}

func (x *FishEffect) Reset() {
	*x = FishEffect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_shared_v1_biz_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FishEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FishEffect) ProtoMessage() {}

func (x *FishEffect) ProtoReflect() protoreflect.Message {
	mi := &file_api_shared_v1_biz_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FishEffect.ProtoReflect.Descriptor instead.
func (*FishEffect) Descriptor() ([]byte, []int) {
	return file_api_shared_v1_biz_proto_rawDescGZIP(), []int{2}
}

func (x *FishEffect) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FishEffect) GetEffectType() int32 {
	if x != nil {
		return x.EffectType
	}
	return 0
}

func (x *FishEffect) GetEffectExpireMs() int64 {
	if x != nil {
		return x.EffectExpireMs
	}
	return 0
}

type FreshFish struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IconSourceId   int64           `protobuf:"varint,3,opt,name=icon_source_id,json=iconSourceId,proto3" json:"icon_source_id,omitempty"`
	Weight         int64           `protobuf:"varint,4,opt,name=weight,proto3" json:"weight,omitempty"`
	MaxHeal        int64           `protobuf:"varint,5,opt,name=max_heal,json=maxHeal,proto3" json:"max_heal,omitempty"`
	Heal           int64           `protobuf:"varint,6,opt,name=heal,proto3" json:"heal,omitempty"`
	RecoverSpeed   int64           `protobuf:"varint,7,opt,name=recover_speed,json=recoverSpeed,proto3" json:"recover_speed,omitempty"`
	Atk            int64           `protobuf:"varint,8,opt,name=atk,proto3" json:"atk,omitempty"`
	Def            int64           `protobuf:"varint,9,opt,name=def,proto3" json:"def,omitempty"`
	EarnSpeed      int64           `protobuf:"varint,10,opt,name=earn_speed,json=earnSpeed,proto3" json:"earn_speed,omitempty"`
	Dodge          int32           `protobuf:"varint,11,opt,name=dodge,proto3" json:"dodge,omitempty"`
	Money          int64           `protobuf:"varint,12,opt,name=money,proto3" json:"money,omitempty"`
	Status         FishStatus      `protobuf:"varint,13,opt,name=status,proto3,enum=shared.v1.FishStatus" json:"status,omitempty"`
	PersonalityId  int32           `protobuf:"varint,14,opt,name=personality_id,json=personalityId,proto3" json:"personality_id,omitempty"`
	MasterUid      int64           `protobuf:"varint,15,opt,name=master_uid,json=masterUid,proto3" json:"master_uid,omitempty"`
	FishSkills     []*FishSkill    `protobuf:"bytes,16,rep,name=fish_skills,json=fishSkills,proto3" json:"fish_skills,omitempty"`
	ProtectCount   int32           `protobuf:"varint,17,opt,name=protect_count,json=protectCount,proto3" json:"protect_count,omitempty"`
	AwakingRemain  int32           `protobuf:"varint,18,opt,name=awaking_remain,json=awakingRemain,proto3" json:"awaking_remain,omitempty"`
	FishStatistics *FishStatistics `protobuf:"bytes,19,opt,name=fish_statistics,json=fishStatistics,proto3" json:"fish_statistics,omitempty"`
	Level          int32           `protobuf:"varint,20,opt,name=level,proto3" json:"level,omitempty"`
	Effects        []*FishEffect   `protobuf:"bytes,21,rep,name=effects,proto3" json:"effects,omitempty"`
	Godhead        []*FishGodhead  `protobuf:"bytes,22,rep,name=godhead,proto3" json:"godhead,omitempty"`
	Behavior       []int32         `protobuf:"varint,23,rep,packed,name=behavior,proto3" json:"behavior,omitempty"`
}

func (x *FreshFish) Reset() {
	*x = FreshFish{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_shared_v1_biz_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FreshFish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FreshFish) ProtoMessage() {}

func (x *FreshFish) ProtoReflect() protoreflect.Message {
	mi := &file_api_shared_v1_biz_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FreshFish.ProtoReflect.Descriptor instead.
func (*FreshFish) Descriptor() ([]byte, []int) {
	return file_api_shared_v1_biz_proto_rawDescGZIP(), []int{3}
}

func (x *FreshFish) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FreshFish) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FreshFish) GetIconSourceId() int64 {
	if x != nil {
		return x.IconSourceId
	}
	return 0
}

func (x *FreshFish) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *FreshFish) GetMaxHeal() int64 {
	if x != nil {
		return x.MaxHeal
	}
	return 0
}

func (x *FreshFish) GetHeal() int64 {
	if x != nil {
		return x.Heal
	}
	return 0
}

func (x *FreshFish) GetRecoverSpeed() int64 {
	if x != nil {
		return x.RecoverSpeed
	}
	return 0
}

func (x *FreshFish) GetAtk() int64 {
	if x != nil {
		return x.Atk
	}
	return 0
}

func (x *FreshFish) GetDef() int64 {
	if x != nil {
		return x.Def
	}
	return 0
}

func (x *FreshFish) GetEarnSpeed() int64 {
	if x != nil {
		return x.EarnSpeed
	}
	return 0
}

func (x *FreshFish) GetDodge() int32 {
	if x != nil {
		return x.Dodge
	}
	return 0
}

func (x *FreshFish) GetMoney() int64 {
	if x != nil {
		return x.Money
	}
	return 0
}

func (x *FreshFish) GetStatus() FishStatus {
	if x != nil {
		return x.Status
	}
	return FishStatus_alive
}

func (x *FreshFish) GetPersonalityId() int32 {
	if x != nil {
		return x.PersonalityId
	}
	return 0
}

func (x *FreshFish) GetMasterUid() int64 {
	if x != nil {
		return x.MasterUid
	}
	return 0
}

func (x *FreshFish) GetFishSkills() []*FishSkill {
	if x != nil {
		return x.FishSkills
	}
	return nil
}

func (x *FreshFish) GetProtectCount() int32 {
	if x != nil {
		return x.ProtectCount
	}
	return 0
}

func (x *FreshFish) GetAwakingRemain() int32 {
	if x != nil {
		return x.AwakingRemain
	}
	return 0
}

func (x *FreshFish) GetFishStatistics() *FishStatistics {
	if x != nil {
		return x.FishStatistics
	}
	return nil
}

func (x *FreshFish) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *FreshFish) GetEffects() []*FishEffect {
	if x != nil {
		return x.Effects
	}
	return nil
}

func (x *FreshFish) GetGodhead() []*FishGodhead {
	if x != nil {
		return x.Godhead
	}
	return nil
}

func (x *FreshFish) GetBehavior() []int32 {
	if x != nil {
		return x.Behavior
	}
	return nil
}

type FishDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fish    *FreshFish `protobuf:"bytes,1,opt,name=fish,proto3" json:"fish,omitempty"`
	Parking string     `protobuf:"bytes,2,opt,name=parking,proto3" json:"parking,omitempty"`
	Rating  *int32     `protobuf:"varint,3,opt,name=rating,proto3,oneof" json:"rating,omitempty"`
}

func (x *FishDetail) Reset() {
	*x = FishDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_shared_v1_biz_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FishDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FishDetail) ProtoMessage() {}

func (x *FishDetail) ProtoReflect() protoreflect.Message {
	mi := &file_api_shared_v1_biz_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FishDetail.ProtoReflect.Descriptor instead.
func (*FishDetail) Descriptor() ([]byte, []int) {
	return file_api_shared_v1_biz_proto_rawDescGZIP(), []int{4}
}

func (x *FishDetail) GetFish() *FreshFish {
	if x != nil {
		return x.Fish
	}
	return nil
}

func (x *FishDetail) GetParking() string {
	if x != nil {
		return x.Parking
	}
	return ""
}

func (x *FishDetail) GetRating() int32 {
	if x != nil && x.Rating != nil {
		return *x.Rating
	}
	return 0
}

type FishSkill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillId *int32 `protobuf:"varint,1,opt,name=skill_id,json=skillId,proto3,oneof" json:"skill_id,omitempty"`
	Level   int32  `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *FishSkill) Reset() {
	*x = FishSkill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_shared_v1_biz_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FishSkill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FishSkill) ProtoMessage() {}

func (x *FishSkill) ProtoReflect() protoreflect.Message {
	mi := &file_api_shared_v1_biz_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FishSkill.ProtoReflect.Descriptor instead.
func (*FishSkill) Descriptor() ([]byte, []int) {
	return file_api_shared_v1_biz_proto_rawDescGZIP(), []int{5}
}

func (x *FishSkill) GetSkillId() int32 {
	if x != nil && x.SkillId != nil {
		return *x.SkillId
	}
	return 0
}

func (x *FishSkill) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

type FishGodhead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Level      int32  `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	FishName   string `protobuf:"bytes,3,opt,name=fish_name,json=fishName,proto3" json:"fish_name,omitempty"`
	MasterName string `protobuf:"bytes,4,opt,name=master_name,json=masterName,proto3" json:"master_name,omitempty"`
}

func (x *FishGodhead) Reset() {
	*x = FishGodhead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_shared_v1_biz_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FishGodhead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FishGodhead) ProtoMessage() {}

func (x *FishGodhead) ProtoReflect() protoreflect.Message {
	mi := &file_api_shared_v1_biz_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FishGodhead.ProtoReflect.Descriptor instead.
func (*FishGodhead) Descriptor() ([]byte, []int) {
	return file_api_shared_v1_biz_proto_rawDescGZIP(), []int{6}
}

func (x *FishGodhead) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FishGodhead) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *FishGodhead) GetFishName() string {
	if x != nil {
		return x.FishName
	}
	return ""
}

func (x *FishGodhead) GetMasterName() string {
	if x != nil {
		return x.MasterName
	}
	return ""
}

var File_api_shared_v1_biz_proto protoreflect.FileDescriptor

var file_api_shared_v1_biz_proto_rawDesc = []byte{
	0x0a, 0x17, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x76, 0x31, 0x2f,
	0x62, 0x69, 0x7a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x76, 0x31, 0x22, 0xdd, 0x01, 0x0a, 0x08, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x61, 0x6e,
	0x6b, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x73, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x73, 0x68, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x55, 0x69,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x6c, 0x69, 0x76, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x28, 0x0a, 0x04, 0x66, 0x69,
	0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x65, 0x73, 0x68, 0x46, 0x69, 0x73, 0x68, 0x52, 0x04,
	0x66, 0x69, 0x73, 0x68, 0x22, 0xa1, 0x05, 0x0a, 0x0e, 0x46, 0x69, 0x73, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x39, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x01, 0x52, 0x12, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6b, 0x69, 0x6c,
	0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0b, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x45, 0x61, 0x72, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x65, 0x61, 0x72, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x50, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x60, 0x0a, 0x13, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x73, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x77, 0x74,
	0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x11, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x1a, 0x3d, 0x0a, 0x0f, 0x45, 0x61, 0x72, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x70,
	0x72, 0x6f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x22, 0x6b, 0x0a, 0x0a, 0x46, 0x69, 0x73, 0x68,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x6d, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x4d, 0x73, 0x22, 0x81, 0x06, 0x0a, 0x09, 0x46, 0x72, 0x65, 0x73, 0x68, 0x46,
	0x69, 0x73, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x63, 0x6f, 0x6e, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x69, 0x63, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x68, 0x65, 0x61,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x48, 0x65, 0x61, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x68, 0x65, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x74, 0x6b,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x61, 0x74, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x64,
	0x65, 0x66, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x64, 0x65, 0x66, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x65, 0x61, 0x72, 0x6e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x64, 0x6f, 0x64, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x6f, 0x64,
	0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x35, 0x0a,
	0x0b, 0x66, 0x69, 0x73, 0x68, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x69, 0x73, 0x68, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x0a, 0x66, 0x69, 0x73, 0x68, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x77, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x61, 0x77, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x42, 0x0a, 0x0f, 0x66, 0x69, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x0e, 0x66, 0x69, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x07, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x73, 0x68, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x52, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x07, 0x67,
	0x6f, 0x64, 0x68, 0x65, 0x61, 0x64, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x73, 0x68, 0x47, 0x6f, 0x64,
	0x68, 0x65, 0x61, 0x64, 0x52, 0x07, 0x67, 0x6f, 0x64, 0x68, 0x65, 0x61, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x17, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x08, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x22, 0x78, 0x0a, 0x0a, 0x46, 0x69, 0x73,
	0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x28, 0x0a, 0x04, 0x66, 0x69, 0x73, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x72, 0x65, 0x73, 0x68, 0x46, 0x69, 0x73, 0x68, 0x52, 0x04, 0x66, 0x69, 0x73,
	0x68, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x06, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x22, 0x4e, 0x0a, 0x09, 0x46, 0x69, 0x73, 0x68, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x12, 0x1e, 0x0a, 0x08, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x5f, 0x69, 0x64, 0x22, 0x71, 0x0a, 0x0b, 0x46, 0x69, 0x73, 0x68, 0x47, 0x6f, 0x64, 0x68, 0x65,
	0x61, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x73, 0x68,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x73,
	0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x2a, 0x2f, 0x0a, 0x0c, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x61,
	0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x69, 0x6c, 0x6c, 0x73,
	0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x10, 0x01, 0x2a, 0x46, 0x0a, 0x0a, 0x46, 0x69, 0x73, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x09, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x75,
	0x70, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x64, 0x65, 0x61, 0x64,
	0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x04, 0x2a,
	0x5e, 0x0a, 0x11, 0x46, 0x69, 0x73, 0x68, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x15, 0x66, 0x69, 0x73, 0x68, 0x5f, 0x70, 0x61, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x00, 0x12,
	0x17, 0x0a, 0x13, 0x66, 0x69, 0x73, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x66, 0x69, 0x73, 0x68,
	0x5f, 0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x10, 0x02, 0x42,
	0x42, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x50,
	0x01, 0x5a, 0x20, 0x6e, 0x65, 0x77, 0x2d, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_shared_v1_biz_proto_rawDescOnce sync.Once
	file_api_shared_v1_biz_proto_rawDescData = file_api_shared_v1_biz_proto_rawDesc
)

func file_api_shared_v1_biz_proto_rawDescGZIP() []byte {
	file_api_shared_v1_biz_proto_rawDescOnce.Do(func() {
		file_api_shared_v1_biz_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_shared_v1_biz_proto_rawDescData)
	})
	return file_api_shared_v1_biz_proto_rawDescData
}

var file_api_shared_v1_biz_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_api_shared_v1_biz_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_api_shared_v1_biz_proto_goTypes = []interface{}{
	(PoolRankType)(0),      // 0: shared.v1.PoolRankType
	(FishStatus)(0),        // 1: shared.v1.FishStatus
	(FishParkingStatus)(0), // 2: shared.v1.FishParkingStatus
	(*PoolRank)(nil),       // 3: shared.v1.PoolRank
	(*FishStatistics)(nil), // 4: shared.v1.FishStatistics
	(*FishEffect)(nil),     // 5: shared.v1.FishEffect
	(*FreshFish)(nil),      // 6: shared.v1.FreshFish
	(*FishDetail)(nil),     // 7: shared.v1.FishDetail
	(*FishSkill)(nil),      // 8: shared.v1.FishSkill
	(*FishGodhead)(nil),    // 9: shared.v1.FishGodhead
	nil,                    // 10: shared.v1.FishStatistics.EarnDetailEntry
	nil,                    // 11: shared.v1.FishStatistics.GrowthDetailEntry
	nil,                    // 12: shared.v1.FishStatistics.GrowthCountDetailEntry
}
var file_api_shared_v1_biz_proto_depIdxs = []int32{
	6,  // 0: shared.v1.PoolRank.fish:type_name -> shared.v1.FreshFish
	10, // 1: shared.v1.FishStatistics.earn_detail:type_name -> shared.v1.FishStatistics.EarnDetailEntry
	11, // 2: shared.v1.FishStatistics.growth_detail:type_name -> shared.v1.FishStatistics.GrowthDetailEntry
	12, // 3: shared.v1.FishStatistics.growth_count_detail:type_name -> shared.v1.FishStatistics.GrowthCountDetailEntry
	1,  // 4: shared.v1.FreshFish.status:type_name -> shared.v1.FishStatus
	8,  // 5: shared.v1.FreshFish.fish_skills:type_name -> shared.v1.FishSkill
	4,  // 6: shared.v1.FreshFish.fish_statistics:type_name -> shared.v1.FishStatistics
	5,  // 7: shared.v1.FreshFish.effects:type_name -> shared.v1.FishEffect
	9,  // 8: shared.v1.FreshFish.godhead:type_name -> shared.v1.FishGodhead
	6,  // 9: shared.v1.FishDetail.fish:type_name -> shared.v1.FreshFish
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_api_shared_v1_biz_proto_init() }
func file_api_shared_v1_biz_proto_init() {
	if File_api_shared_v1_biz_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_shared_v1_biz_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_shared_v1_biz_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FishStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_shared_v1_biz_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FishEffect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_shared_v1_biz_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FreshFish); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_shared_v1_biz_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FishDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_shared_v1_biz_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FishSkill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_shared_v1_biz_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FishGodhead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_shared_v1_biz_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_api_shared_v1_biz_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_api_shared_v1_biz_proto_msgTypes[5].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_shared_v1_biz_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_shared_v1_biz_proto_goTypes,
		DependencyIndexes: file_api_shared_v1_biz_proto_depIdxs,
		EnumInfos:         file_api_shared_v1_biz_proto_enumTypes,
		MessageInfos:      file_api_shared_v1_biz_proto_msgTypes,
	}.Build()
	File_api_shared_v1_biz_proto = out.File
	file_api_shared_v1_biz_proto_rawDesc = nil
	file_api_shared_v1_biz_proto_goTypes = nil
	file_api_shared_v1_biz_proto_depIdxs = nil
}
